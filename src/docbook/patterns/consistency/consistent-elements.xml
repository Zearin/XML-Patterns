<?xml version='1.0' encoding='UTF-8'?>
<section
	xmlns="http://docbook.org/ns/docbook" 
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:xl="http://www.w3.org/1999/xlink" 
	version="5.0"

	role="pattern">
	
	<info>
		<title>Consistent Element Set</title>

		<abstract>
			<para>Provide a set of elements which is consistently grouped together as the content
				models of a number of other elements.</para>
		</abstract>
	</info>

	<section>
		<title>Problem</title>

		<para>Providing a flexible DTD structure could require authors to learn which element types
			can be used in content models of a variety of other element types. Having different
			content models for every element makes it difficult to authors to learn a DTD, and could
			make processing software more complex.</para>
	</section>

	<section>
		<title>Context</title>

		<para>Anywhere where a large number of elements can be sub-elements of many different parent
			element types.</para>
	</section>

	<section>
		<title>Forces</title>

		<para>Large number of elements are difficult to use effectively. They can be difficult to
			learn and process.</para>
	</section>

	<section>
		<title>Solution</title>

		<para>Where sub elements appear, consistently provide the same set of elements in many
			different places. This reduces the learning requirements of authors. Usually the element
			set is defined with an entity parameter, and the entity parameter is referred to from
			each place the set needs to appear.</para>
	</section>

	<section>
		<title>Examples</title>

		<example>
			<title>Example</title>
			
			<para>A DTD with inconsistent sets of elements in content model of various elements are
				difficult to learn how to use. For example:</para>
			<programlisting language="dtd"><![CDATA[
<!ELEMENT Foo (A|B|C|E)*>
<!ELEMENT Bar (A|B|C|D)*>
<!ELEMENT Baz (A|C|D|E)*>
                ]]></programlisting>
		</example>

		<example>
			<title>Example</title>
			
			<para>The next DTD is much easier to learn how to use, but some compromises must be
				made. It is often better to introduce consistency for the sake of
				ease-of-use.</para>

			<programlisting language="dtd"><![CDATA[
<!ENTITY % content "A|B|C|D|E">
<!ELEMENT Foo (%content;)*>
<!ELEMENT Bar (%content;)*>
<!ELEMENT Baz (%content;)*>
			]]></programlisting>
			<para>Here the author has more flexibility, but there is more consistency. This can make
				it easier for processing software as well.</para>
		</example>
	</section>

	<section>
		<title>Discussion</title>
		<para>The resulting structure provides easier to learn, consistent sets of elements.
			Providing consistent sets of elements is far easier for authors to learn. Some
			compromises might need to be made in the details of the structure to provide this
			consistency, but this is usually worth the price.</para>
	</section>

	<section>
		<title>Related Patterns</title>
		<para>â€¦</para>
	</section>

	<section>
		<title>Known Uses</title>
		<para>In XHTML, there are element sets for block content, and inline content. The block
			content element set is used for all content that can be used at the paragraph level.
			Inline content is used consistently within paragraphs.</para>
	</section>
</section>

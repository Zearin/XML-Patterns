<?xml version='1.0' encoding='UTF-8'?>
<part
	xmlns="http://docbook.org/ns/docbook"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:xl="http://www.w3.org/1999/xlink" 
	version="5.0">
	
	<title>Introduction</title>

	<article>
		<title>Introductory Material</title>

		<para>Follow the links below for some background material that might be useful as an introduction into the world of XML Design Patterns.</para>
	</article>

	<article>
		<title>Pattern</title>

		<para>The originator of the pattern, Christopher Alexander, defines a pattern as “a three part rule, which expresses a relation between a certain context, a problem, and a solution” [<link xl:href="books/books.part.xml#0195024028">Alex79</link>].</para>
		<para>A pattern can be thought of as a tried and true way to deal with a problem that appears over and over again. People who are experienced in a particular field of knowledge will have internalized certain solutions to these problems. They recognize a problem to be solved and know which solution to apply in the particular situation. The idea of a pattern is to be able to describe this internalized expert knowledge and to state the problem, context and solution, so that less experienced people can benefit from this knowledge.</para>
		<para>Another benefit of having formal, written patterns is that these previously internalized concepts get named. It is much easier to discuss and think about something once it has been named. Discussing concepts that are unnamed is difficult.</para>
		<para>A pattern language brings together a number of these patterns in one particular field. It is an attempt to reproduce all of the knowledge needed to create quality items in that field. A pattern language for buildings gives one the power to create building which people will want to live in, a pattern language for software design gives the power to create software which is usable and maintainable. Just as spoken language give people the ability to create an infinite variety of sentences, pattern languages give people the power to create an infinite variety of document types. We just need to create a common vocabulary so we can make useful sentences.</para>
		<para>This site is an attempt to start to produce an XML Structural Pattern language. This pattern language gives one the power to create document types for XML, which describe documents that are useful, maintainable, easy to author, and easy to process. This pattern language will be most useful if it is shared across the whole XML community. Because of this, your feedback into this process is very important.</para>
	</article>
	<article>
		<title>History</title>

		<para>The concept of patterns was originated by Christopher Alexander. Alexander was an architect. He used patterns to design building and towns. His patterns deal with subjects such as entry ways, gardens and roadways. In the late 1980s people started applying his concept to object oriented software design. The first to do so were Ward Cunningham and Kent Beck, who in 1987 wrote a paper entitled "<link xl:href="http://c2.com/doc/oopsla87.html">Using Pattern Languages for Object-Oriented Programs</link>", which described five patterns that discussed problems in designing Smalltalk windows.</para>
		<para>The object oriented community quickly recognized the power of patterns and started writing patterns that appeared in articles, workshops and books. The breakthrough work was the "<link xl:href="books/books.part.xml#0201633612">Design Patterns</link>" book, which brought wide scale acceptance of patterns to the object-oriented world. Work has also been done in the areas of analysis patterns, process patterns, and organizational patterns. This site is an attempt to apply the concept of patterns to XML Structural Design.</para>
	</article>
	<article>
		<title>Pattern Forms</title>

		<para>There are many different ways to write patterns. Different authors have different way of organizing the ideas presented. Alexander's original patterns were presented in a fairly informal, narrative style. The patterns presented in "<link xl:href="books/books.part.xml#0201633612">Design Patterns</link>" book were much more fine grained, decomposing each pattern into many sections. The structure used depends on several factors. Each author has his or own preferences. Different subject matters may influence the structure. For example more technical subject areas can call for patterns with more structure. Different audiences may call for different structures as well, novice readers may prefer a more prosy style, while more experienced readers may prefer a more structured approach. The form chosen for this site is a middle of the road one, not as prosy as Alexander's patterns in <link xl:href="books/books.part.xml#0195019199">A Pattern Language</link>, yet not as structured as "<link xl:href="books/books.part.xml#0201633612">Design Patterns</link>" book either.</para>
		<para>What matters is that there is a consistent structure so patterns are easier to understand and compare.</para>
		<para>Most people would agree that there must be at least five elements in every pattern: a name; a problem description; the context of the problem; the solution; and the rational for the solution. This web site uses the following sections for each pattern:</para>

		<glossary>
			<glossentry>
				<glossterm>Name</glossterm>
				<glossdef>
					<para>The name of the pattern.</para>
				</glossdef>
			</glossentry>

			<glossentry>
				<glossterm>Abstract</glossterm>
				<glossdef>
					<para>A brief description of the pattern. No more than a few sentences.</para>
				</glossdef>
			</glossentry>

			<glossentry>
				<glossterm>Problem</glossterm>
				<glossdef>
					<para>A description of the problem to be solved.</para>
				</glossdef>
			</glossentry>

			<glossentry>
				<glossterm>Context</glossterm>
				<glossdef>
					<para>The context that the problem appears in. Some problems only arise in certain contexts. Different contexts could require different solutions, leading to different patterns.</para>
				</glossdef>
			</glossentry>

			<glossentry>
				<glossterm>Forces</glossterm>
				<glossdef>
					<para>A description of the elements that influence the problem. These are issues that the effect the solution, and that the solution will try to fix.</para>
				</glossdef>
			</glossentry>

			<glossentry>
				<glossterm>Solution</glossterm>
				<glossdef>
					<para>The way to fix the problem.</para>
				</glossdef>
			</glossentry>

			<glossentry>
				<glossterm>Examples</glossterm>
				<glossdef>
					<para>Sample(s) of how to apply the pattern. Usually a simple, made-up demonstration.</para>
				</glossdef>
			</glossentry>

			<glossentry>
				<glossterm>Discussion</glossterm>
				<glossdef>
					<para>Includes a rationale for the pattern. Explains why this solution works, and possibly why the solution might not work in certain contexts.</para>
				</glossdef>
			</glossentry>

			<glossentry>
				<glossterm>Related Patterns</glossterm>
				<glossdef>
					<para>A list of patterns which may be similar to, specializations of, or generalizations of this pattern. Will discuss how similar patterns differ.</para>
				</glossdef>
			</glossentry>

			<glossentry>
				<glossterm>Known Uses</glossterm>
				<glossdef>
					<para>Describes existing documents where instances of the pattern exist.</para>
				</glossdef>
			</glossentry>
		</glossary>
	</article>
	<article>
		<title>Good Design</title>

		<para>The purpose of XML Structural Patterns are to help create document types that are designed well. The goal of a design can be thought of a balancing of forces. There are many competing forces that the designer of a document type must deal with simultaneously. In non-trivial problems, it is impossible for all of the forces to be eliminated completely, so compromises must be made.</para>
		<para>These are some of the forces that the XML document designer must deal with:</para>
			
		<variablelist>
			<varlistentry>
				<term>Document Size</term>
				<listitem><para>It is usually better to have short documents. Longer documents take up more disk space, take longer to process by machines and humans, and take longer to transmit across the network.</para></listitem>
			</varlistentry>
			<varlistentry>
				<term>Ease of Authoring</term>
				<listitem><para>Documents which are authored by people must be understandable to them. Extremely complex documents will cause authors to make mistakes, waste time, and get frustrated.</para></listitem>
			</varlistentry>
			<varlistentry>
				<term>Ease of Processing</term>
				<listitem><para>XML documents are ultimately processed by software at some point, and the document structure effects how difficult the processing software will be to write.</para></listitem>
			</varlistentry>
			<varlistentry>
				<term>Flexibility</term>
				<listitem><para>This is an indication of how the document instances written for a particular document type can differ. Some document types, such as HTML were meant to provide for a huge variety of documents to be written using them. For other systems, for examples, a payroll processing system, very strict rules about how the data is to be presented is needed.</para></listitem>
			</varlistentry>
			<varlistentry>
				<term>Consistency</term>
				<listitem><para>Consistency is important for documents to be usable. Inconsistencies lead to errors and misunderstandings.</para></listitem>
			</varlistentry>
			<varlistentry>
				<term>Amount of Abstraction</term>
				<listitem>
					<para>The granularity and types of abstraction used in a document type will vary depending on the context. A date could be marked up as:</para>
	
					<programlisting language="xml"><![CDATA[
<Date>12-10-2000</Date>
					]]></programlisting>
				
					
					<para>or</para>
						
					<programlisting language="xml"><![CDATA[
<Date> 
	<Month>Dec</Month> 
	<Day>10</Day> 
	<Year>2000</Year> 
</Date>
					]]></programlisting>
	
					<para>Which one is more appropriate depends on the situation where it is used.</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</article>

	<article>
		<title>Journey</title>

		<para>This page provides an overview of the patterns on this site. It is written in a more informal, narrative fashion then other indexes, to provide a gentler introduction to the patterns. This description of the patterns should give a good idea of how the different patterns relate, and roughly in what order they will be used.</para>
		<para>When creating a system a data representation must be chosen for information, one possibility is to Use XML. After deciding on XML, investigate existing schemas to see if the project can Reuse Document Types.</para>
		<para>Once XML has been chosen as a data representation, it must be determined what the root elements are, or if multiple document types should be used. Multiple Document Types can be used to represent a range of different document types, or if documents are related and have some commonalities, a Multi Root Document Types can be used. If multiple transaction types are needed a Universal Root can be used. To separate concerns such as transport of the data from the data itself, an Envelope can be used.</para>
		<para>To create structure in a document, element types which represent abstractions are needed. Name these abstractions using Short Understandable Names These can be based on domain concepts and become Domain Element. To add more structure Container Element can be used. When containers of like element types are needed a Collection Element can be used. To make the documents easier to use for authors, abstraction can be added with Choice Reducing Container and Optional Container Element</para>
		<para>When creating these abstractions, some metadata will be needed to be placed in the document. Care should be taken to Separate Metadata and Data. This can be done by placing Metadata in Separate Document or by using a Head-Body. When creating the structure, put Metadata First.</para>
		<para>It must be decided how to organize these abstractions. When one abstraction references another one, that is when one abstraction uses information that is declared in another one, Declare Before First Use. When the same information needs to be referenced from many places, use a Flyweight. A Referenced Note can be used when an area of text needs to reference an note in another area of the text. The natural way to structure information in XML is using a hierarchical format, however it is sometimes better to use a more graph-like structure using Marketplace.</para>
		<para>Sometimes a document designer will not be able to foresee all of the uses of a document type, in that case a Catch-All Element can be used to easily introduce elements from other DTDs. Role Attribute and Extensible Content Model can be used to make a more flexible document type by adding element that can be introduced by the document author.</para>
		<para>To make documents easier to use, consistency is important. Common Attributes and Consistent Element Set can be used to provide this consistency.</para>
	</article>
</part>

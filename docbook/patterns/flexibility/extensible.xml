<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<section
	xmlns="http://docbook.org/ns/docbook" 
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:xl="http://www.w3.org/1999/xlink" 
	version="5.0"
	
	role="pattern">
	
	<info>
		<title>Extensible Content Model</title>

		<abstract>
			<para>Provide a mechanism which allows additional elements to be added into existing
				content models.</para>
		</abstract>
	</info>

	<section>
		<title>Problem</title>
		<para>At the time of designing the document type, the designer may not be able to foresee
			all of the uses and situations where document instances will be used. To provide for
			flexibility, the contents of elements can be made to be redefinable by the document
			instance.</para>
	</section>

	<section>
		<title>Context</title>
		<para>This is a very general mechanism that can be used anytime additional flexibility is
			needed.</para>
	</section>

	<section>
		<title>Forces</title>
		<para>Flexibility is often required for a document type to be able to be used effectively.
			Flexibility, however often makes processing of the documents more difficult.
			Customization of software is often needed to deal with the flexibility.</para>
	</section>

	<section>
		<title>Solution</title>
		<para>The designer of the document can add a mechanism to allow the author of a document
			instance to extend an element definition from the document type.</para>
	</section>

	<section>
		<title>Examples</title>

		<example>
			<title>Using DTDs</title>

			<para>This example uses a DTD that allows the document instance to extend an Address
				element. This is done through use a parameter entity which is defined in the DTD,
				but the creator of the document instance can overwrite.</para>
			<para>First a DTD is created that defines a simple Address type, consisting only of the
				Name, Street and City. Realizing that this may not be enough for all users of this
				document type, the designer defines a parameter entity called local.address that is
				blank (&quot;&quot;) but can be extended in the document instance.</para>
			<example>
				<title>purchase_order.dtd</title>

				<screen>
    
    </screen>

				<literallayout language="dtd">
&lt;!ENTITY % local.address &quot;&quot;&gt;
&lt;!ENTITY % address &quot;Name, Street, City %local.address;&quot;&gt;
&lt;!ELEMENT PurchaseOrder ( Item, ShipTo, BillTo )&gt;
&lt;!ELEMENT Item   (#PCDATA)&gt;
&lt;!ELEMENT ShipTo (%address;)&gt;;
&lt;!ELEMENT BillTo (%address;)&gt;;
&lt;!ELEMENT Name   (#PCDATA)&gt;
&lt;!ELEMENT Street (#PCDATA)&gt;
&lt;!ELEMENT City   (#PCDATA)&gt;
</literallayout>
			</example>

			<para>The creator of a document decides that the address defined in the DTD is
				inadequate for the document being create, so he extends the definition of an Address
				to include State and Zip. To do this he creates his own definition of the
				local.address Parameter Entity. This allows him to add these elements to his own
				address structure.</para>

			<example>
				<title>mydoc.xml</title>


				<literallayout language="xml">
&lt;!DOCTYPE PURCHASE_ORDER SYSTEM &quot;purchase_order.dtd&quot; [
&lt;!ENTITY % local.address &quot;, State, Zip&quot; &gt;
&lt;!ELEMENT State (#PCDATA)&gt;
&lt;!ELEMENT Zip (#PCDATA)&gt;
]&gt;
&lt;PurchaseOrder&gt;
&lt;Item&gt;X123&lt;/Item&gt;
&lt;ShipTo&gt;
&lt;Name&gt;Bob Smith&lt;/Name&gt;
&lt;Street&gt;123 Maple Dr.&lt;/Street&gt;
&lt;City&gt;Anytown&lt;/City&gt;
&lt;State&gt;CA&lt;/State&gt;
&lt;Zip&gt;12345&lt;/Zip&gt;
&lt;/ShipTo&gt;
&lt;BillTo&gt;
&lt;Name&gt;Bob Smith&lt;/Name&gt;
&lt;Street&gt;123 Maple Dr.&lt;/Street&gt;
&lt;City&gt;Anytown&lt;/City&gt;
&lt;State&gt;CA&lt;/State&gt;
&lt;Zip&gt;12345&lt;/Zip&gt;
&lt;/BillTo&gt;
&lt;/PurchaseOrder&gt;
</literallayout>
			</example>
		</example>

		<example>
			<title>Using XML Schemas</title>

			<para>This next example uses XML Schemas to do the same thing. We use the XML Schema
				mechanism of deriving types by extension to do this. This example is based on a
				working draft of the XML Schema proposal, so this example may not be compatible with
				future versions of the XML Schema. A schema is created to include the simple Address
				type with a Name, Street, and City.</para>

			<example>
				<title>PurchaseOrder.xsd</title>

				<literallayout language="xml">
&lt;xsd:schema
xmlns:xsd=&quot;http://www.w3.org/1999/XMLSchema&quot;&gt;

&lt;xsd:element
name=&quot;purchaseOrder&quot;
type=&quot;PurchaseOrderType&quot;/&gt;
&lt;xsd:complexType name=&quot;PurchaseOrderType&quot;&gt;
&lt;xsd:element name=&quot;Item&quot;   type=&quot;xsd:string&quot;/&gt;
&lt;xsd:element name=&quot;ShipTo&quot; type=&quot;Address&quot;/&gt;
&lt;xsd:element name=&quot;BillTo&quot; type=&quot;Address&quot;/&gt;
&lt;/xsd:complexType&gt;

&lt;xsd:complexType name=&quot;Address&quot;&gt;
&lt;xsd:element name=&quot;Name&quot;   type=&quot;xsd:string&quot;/&gt;
&lt;xsd:element name=&quot;Street&quot; type=&quot;xsd:string&quot;/&gt;
&lt;xsd:element name=&quot;City&quot;   type=&quot;xsd:string&quot;/&gt;
&lt;/xsd:complexType&gt;

&lt;/xsd:schema&gt;
</literallayout>
			</example>

			<para>The author of a document realizes that this simple address definition will not be
				adequate, so a new address type is created. The new type is extended from the old
				type, and adds the State and Zip elements.</para>

			<example>
				<title>US-Address.xsd</title>


				<literallayout language="xml">
&lt;xsd:schema
xmlns:xsd=&quot;http://www.w3.org/1999/XMLSchema&quot;
xmlns:po=&quot;http:www.xmlpatterns.com/PurchaseOrder&quot;&gt;

&lt;xsd:complexType name=&quot;US-Address&quot;
base=&quot;po:Address&quot;
derivedBy=&quot;extension&quot;&gt;
&lt;xsd:element name=&quot;State&quot;  type=&quot;xsd:string&quot;/&gt;
&lt;xsd:element name=&quot;Zip&quot;    type=&quot;xsd:decimal&quot;/&gt;
&lt;/xsd:complexType&gt;

&lt;/xsd:schema&gt;
</literallayout>
			</example>
			<para>To use the new address type in a document instance, both of the schema files are
				used.</para>

			<example>
				<title>mydoc.xml</title>


				<literallayout language="xml">
&lt;PurchaseOrder
xmlns=&quot;http:www.xmlpatterns.com/PurchaseOrder&quot;
xmlns:xsi=&quot;http://www.w3.org/1999/XMLSchema-instance&quot;
xmlns:us=&quot;http://www.xmlpatterns.com/US-Address&quot;
xsi:schemaLocation=
&quot;http://www.xmlpatterns.com/purchaseOrder.xsd
http://www.xmlpatterns.com/US-Address.xsd&quot;&gt;

&lt;Item&gt;X123&lt;/Item&gt;
&lt;ShipTo xsi:type=&quot;us:US-Address&quot;&gt;
&lt;Name&gt;Bob Smith&lt;/Name&gt;
&lt;Street&gt;123 Maple Dr.&lt;/Street&gt;
&lt;City&gt;Anytown&lt;/City&gt;
&lt;State&gt;CA&lt;/State&gt;
&lt;Zip&gt;12345&lt;/Zip&gt;
&lt;/ShipTo&gt;
&lt;BillTo xsi:type=&quot;us:US-Address&quot;&gt;
&lt;Name&gt;Bob Smith&lt;/Name&gt;
&lt;Street&gt;123 Maple Dr.&lt;/Street&gt;
&lt;City&gt;Anytown&lt;/City&gt;
&lt;State&gt;CA&lt;/State&gt;
&lt;Zip&gt;12345&lt;/Zip&gt;
&lt;/BillTo&gt;
&lt;/PurchaseOrder&gt;
</literallayout>
			</example>
		</example>
	</section>


	<section>
		<title>Discussion</title>

		<para>This provides a powerful extension mechanism to the authors of documents. Like with
			all added flexibility, the power comes with a price. Extensible Content Models create
			new element types that standard processing tools for a document type would not be able
			to process correctly. Often customization of software is needed to handle the extensions
			correctly.</para>
		<para>This technique has the advantage of not needlessly over complicating the structure of
			the document type if the flexibility is not needed. Authors can use the document type
			without even being aware that the extension mechanism exists. The existence of these
			Extensible Content Models can be made known only to &quot;power users&quot;, if
			desired.</para>
	</section>

	<section>
		<title>Related Patterns</title>
		<para>This mechanism is powerful, but also requires knowledge of DTD syntax to apply. Often
			the <link xl:href="/patterns/flexibility/generic.xml">Generic Element</link> pattern combined with <link xl:href="/patterns/flexibility/role.xml">Role Attribute</link>s may be a more appropriate
			choice if the authors of the document are not experienced with XML.</para>
	</section>

	<section>
		<title>Known Uses</title>

		<para>The Information and Content Exchange (ICE) Protocol Appendix A demonstrates
			applications of this pattern.</para>
		<para>The XMLspec DTD uses parameter entities to allow for customization of many
			elements.</para>
		<para>The DocBook DTD allows for the types of customizations .</para>
	</section>

	<section>
		<title>References</title>
		<para>See Structuring XML Documents, Section 8.1.2: Adding Elements Types to a DTD.</para>
	</section>

</section>
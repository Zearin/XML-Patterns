<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title>XML Design Patterns</title><meta name="generator" content="DocBook XSL-NS Stylesheets V1.76.1"/></head><body><div class="book" title="XML Design Patterns" id="d55e1"><div class="titlepage"><div><div><h1 class="title">XML Design Patterns</h1></div><div><div class="author"><h3 class="author"><span class="firstname">Toivo</span> <span class="surname">Lainevool</span></h3><code class="email">&lt;<a class="email" href="mailto:info@xmlpatterns.com">info@xmlpatterns.com</a>&gt;</code></div></div></div><hr/></div><dl class="toc"><dt>Table of Contents</dt><dd><ol class="book"><li class="part"><a href="#d55e32">Home</a><ol><li class="article"><a href="#d55e35">XML Design Patterns</a></li></ol></li><li class="part"><a href="#d55e57">Introduction</a><ol><li class="article"><a href="#d55e60">Introductory Material</a></li><li class="article"><a href="#d55e65">Pattern</a></li><li class="article"><a href="#d55e81">History</a></li><li class="article"><a href="#d55e94">Pattern Forms</a><ol><li class="glossary"><a href="#d55e112">Glossary</a></li></ol></li><li class="article"><a href="#d55e173">Good Design</a><ol><li class="section"><a href="#d55e180">Document Size</a></li><li class="section"><a href="#d55e185">Ease of Authoring</a></li><li class="section"><a href="#d55e190">Ease of Processing</a></li><li class="section"><a href="#d55e195">Flexibility</a></li><li class="section"><a href="#d55e200">Consistency</a></li><li class="section"><a href="#d55e205">Amount of Abstraction</a></li></ol></li><li class="article"><a href="#d55e214">Journey</a></li></ol></li><li class="part"><a href="#d55e233">Patterns</a><ol><li class="chapter"><a href="#d55e236">Document Roots</a><ol><li class="section"><a href="#d55e243">Multi Root Document Types</a></li><li class="section"><a href="#d55e296">Multiple Document Types</a></li><li class="section"><a href="#d55e355">Universal Root</a></li></ol></li><li class="chapter"><a href="#d55e410">Metadata</a><ol><li class="section"><a href="#d55e417">Head-Body</a></li><li class="section"><a href="#d55e487">Metadata First</a></li><li class="section"><a href="#d55e542">Metadata in Separate Document</a></li><li class="section"><a href="#d55e612">Separate Metadata and Data</a></li></ol></li><li class="chapter"><a href="#d55e665">Abstraction</a><ol><li class="section"><a href="#d55e672">Choice Reducing Container</a></li><li class="section"><a href="#d55e740">Collection Element</a></li><li class="section"><a href="#d55e809">Container Element</a></li><li class="section"><a href="#d55e873">Domain Element</a></li><li class="section"><a href="#d55e928">Optional Container Element</a></li></ol></li><li class="chapter"><a href="#d55e996">Organization</a><ol><li class="section"><a href="#d55e1003">Declare Before First Use</a></li><li class="section"><a href="#d55e1050">Envelope</a></li><li class="section"><a href="#d55e1108">Flyweight</a></li><li class="section"><a href="#d55e1202">Marketplace</a></li><li class="section"><a href="#d55e1262">Referenced Note</a></li></ol></li><li class="chapter"><a href="#d55e1335">Flexibility</a><ol><li class="section"><a href="#d55e1342">Catch-All Element</a></li><li class="section"><a href="#d55e1407">Extensible Content Model</a></li><li class="section"><a href="#d55e1508">Generic Element</a></li><li class="section"><a href="#d55e1562">Role Attribute</a></li></ol></li><li class="chapter"><a href="#d55e1619">Consistency</a><ol><li class="section"><a href="#d55e1626">Common Attributes</a></li><li class="section"><a href="#d55e1705">Consistent Element Set</a></li><li class="section"><a href="#d55e1766">Parallel Design</a></li></ol></li><li class="chapter"><a href="#d55e1824">Miscellaneous</a><ol><li class="section"><a href="#d55e1831">Content Type Label</a></li><li class="section"><a href="#d55e1893">Reuse Document Types</a></li><li class="section"><a href="#d55e1972">Short Understandable Names</a></li><li class="section"><a href="#d55e2025">Use XML</a></li></ol></li></ol></li><li class="part"><a href="#d55e2153">Books</a><ol><li class="chapter"><a href="#d55e2156">XML Structure</a></li><li class="chapter"><a href="#d55e2161">Patterns</a></li><li class="chapter"><a href="#d55e2166">Software Design Patterns</a></li></ol></li><li class="part"><a href="#d55e2171">Links</a><ol><li class="article"><a href="#d55e2174">Links</a><ol><li class="section"><a href="#d55e2179">XML Design Patterns</a></li><li class="section"><a href="#d55e2233">Other Patterns</a></li><li class="section"><a href="#d55e2257">XML Design</a></li><li class="section"><a href="#d55e2275">Schema Repositories</a></li></ol></li><li class="article"><a href="#d55e2299">Other XML Links</a><ol><li class="section"><a href="#d55e2304">General XML</a></li><li class="section"><a href="#d55e2334">XSLT</a></li></ol></li></ol></li><li class="article"><a href="#d55e2358">About</a><ol><li class="section"><a href="#d55e2363">Contacts</a></li><li class="section"><a href="#d55e2378">What They Are Saying About Us</a></li><li class="section"><a href="#d55e2387">Privacy Statement</a></li><li class="section"><a href="#d55e2394">Log Files</a></li><li class="section"><a href="#d55e2399">Cookies and Web Beacons</a></li><li class="section"><a href="#d55e2406">DoubleClick DART cookies</a></li></ol></li></ol></dd></dl><div class="list-of-examples"><p><strong>List of Examples</strong></p><ol><li>1.1 <a href="#d55e328">Employees.dtd:</a></li><li>1.2 <a href="#d55e333">HoursWorked.dtd:</a></li><li>2.1 <a href="#d55e578">File: author-info.xml</a></li><li>2.2 <a href="#d55e583">File: document.xml</a></li><li>3.1 <a href="#d55e702">Example</a></li><li>3.2 <a href="#d55e709">Example</a></li><li>3.3 <a href="#d55e770">Simple Collection Element</a></li><li>3.4 <a href="#d55e775">Container Element With Metadata</a></li><li>3.5 <a href="#d55e780">Multiple Categories of Same Collection</a></li><li>4.1 <a href="#d55e1160">XML Entities</a></li><li>4.2 <a href="#d55e1167">XLink</a></li><li>4.3 <a href="#d55e1174">ID and IDREF</a></li><li>5.1 <a href="#d55e1374">Example</a></li><li>5.2 <a href="#d55e1381">Example</a></li><li>5.3 <a href="#d55e1437">Using DTDs</a></li><li>5.4 <a href="#d55e1444">purchase_order.dtd</a></li><li>5.5 <a href="#d55e1453">mydoc.xml</a></li><li>5.6 <a href="#d55e1458">Using XML Schemas</a></li><li>5.7 <a href="#d55e1463">PurchaseOrder.xsd</a></li><li>5.8 <a href="#d55e1470">US-Address.xsd</a></li><li>5.9 <a href="#d55e1477">mydoc.xml</a></li><li>6.1 <a href="#d55e1656">Common Attributes in DTDs</a></li><li>6.2 <a href="#d55e1663">Common Attributes in XML Schemas</a></li><li>6.3 <a href="#d55e1735">Example</a></li><li>6.4 <a href="#d55e1742">Example</a></li></ol></div><div class="part" title="Part I. Home" id="d55e32"><div class="titlepage"><div><div><h1 class="title">Part I. Home</h1></div></div></div><dl class="toc"><dt>Table of Contents</dt><dd><ol class="part"><li class="article"><a href="#d55e35">XML Design Patterns</a></li></ol></dd></dl><div class="article" title="XML Design Patterns" id="d55e35"><div class="titlepage"><div><h2 class="title">XML Design Patterns</h2></div><hr/></div><p>Welcome to XMLPatterns.com, the site about designing good XML structure with patterns.</p><p>There are 28 <a class="link" href="patterns/patterns.part.xml">XML Design Patterns</a>. If you are new to software design patterns, a good place to start is the <a class="link" href="intro/introduction.part.xml">Introductory Material</a>.</p><p>In the years since XMLPatterns.com was launched, XML has moved from being a relatively obscure technology to being a part of the everyday technologies that software developers use. Since XML design patterns are an excellent way to pass knowledge on from the experts to XML newcomers, they have become more important then ever. Designing good XML structure using DTDs, W3C XML Schema or RelaxNG does not always come easily, and hopefully the patterns on this site will be able to help out.</p><p>Please feel free to <a class="link" href="mailto:info@xmlpatterns.com">email</a> feedback about this site.</p><p>Thanks for visiting!</p></div></div><div class="part" title="Part II. Introduction" id="d55e57"><div class="titlepage"><div><div><h1 class="title">Part II. Introduction</h1></div></div></div><dl class="toc"><dt>Table of Contents</dt><dd><ol class="part"><li class="article"><a href="#d55e60">Introductory Material</a></li><li class="article"><a href="#d55e65">Pattern</a></li><li class="article"><a href="#d55e81">History</a></li><li class="article"><a href="#d55e94">Pattern Forms</a><ol><li class="glossary"><a href="#d55e112">Glossary</a></li></ol></li><li class="article"><a href="#d55e173">Good Design</a><ol><li class="section"><a href="#d55e180">Document Size</a></li><li class="section"><a href="#d55e185">Ease of Authoring</a></li><li class="section"><a href="#d55e190">Ease of Processing</a></li><li class="section"><a href="#d55e195">Flexibility</a></li><li class="section"><a href="#d55e200">Consistency</a></li><li class="section"><a href="#d55e205">Amount of Abstraction</a></li></ol></li><li class="article"><a href="#d55e214">Journey</a></li></ol></dd></dl><div class="article" title="Introductory Material" id="d55e60"><div class="titlepage"><div><h2 class="title">Introductory Material</h2></div><hr/></div><p>Follow the links below for some background material that might be useful as an introduction into the world of XML Design Patterns.</p></div><div class="article" title="Pattern" id="d55e65"><div class="titlepage"><div><h2 class="title">Pattern</h2></div><hr/></div><p>The originator of the pattern, Christopher Alexander, defines a pattern as “a three part rule, which expresses a relation between a certain context, a problem, and a solution” [<a class="link" href="books/books.part.xml#0195024028">Alex79</a>].</p><p>A pattern can be thought of as a tried and true way to deal with a problem that appears over and over again. People who are experienced in a particular field of knowledge will have internalized certain solutions to these problems. They recognize a problem to be solved and know which solution to apply in the particular situation. The idea of a pattern is to be able to describe this internalized expert knowledge and to state the problem, context and solution, so that less experienced people can benefit from this knowledge.</p><p>Another benefit of having formal, written patterns is that these previously internalized concepts get named. It is much easier to discuss and think about something once it has been named. Discussing concepts that are unnamed is difficult.</p><p>A pattern language brings together a number of these patterns in one particular field. It is an attempt to reproduce all of the knowledge needed to create quality items in that field. A pattern language for buildings gives one the power to create building which people will want to live in, a pattern language for software design gives the power to create software which is usable and maintainable. Just as spoken language give people the ability to create an infinite variety of sentences, pattern languages give people the power to create an infinite variety of document types. We just need to create a common vocabulary so we can make useful sentences.</p><p>This site is an attempt to start to produce an XML Structural Pattern language. This pattern language gives one the power to create document types for XML, which describe documents that are useful, maintainable, easy to author, and easy to process. This pattern language will be most useful if it is shared across the whole XML community. Because of this, your feedback into this process is very important.</p></div><div class="article" title="History" id="d55e81"><div class="titlepage"><div><h2 class="title">History</h2></div><hr/></div><p>The concept of patterns was originated by Christopher Alexander. Alexander was an architect. He used patterns to design building and towns. His patterns deal with subjects such as entry ways, gardens and roadways. In the late 1980s people started applying his concept to object oriented software design. The first to do so were Ward Cunningham and Kent Beck, who in 1987 wrote a paper entitled "<a class="link" href="http://c2.com/doc/oopsla87.html">Using Pattern Languages for Object-Oriented Programs</a>", which described five patterns that discussed problems in designing Smalltalk windows.</p><p>The object oriented community quickly recognized the power of patterns and started writing patterns that appeared in articles, workshops and books. The breakthrough work was the "<a class="link" href="books/books.part.xml#0201633612">Design Patterns</a>" book, which brought wide scale acceptance of patterns to the object-oriented world. Work has also been done in the areas of analysis patterns, process patterns, and organizational patterns. This site is an attempt to apply the concept of patterns to XML Structural Design.</p></div><div class="article" title="Pattern Forms" id="d55e94"><div class="titlepage"><div><h2 class="title">Pattern Forms</h2></div><hr/></div><dl class="toc"><dt>Table of Contents</dt><dd><ol class="article"><li class="glossary"><a href="#d55e112">Glossary</a></li></ol></dd></dl><p>There are many different ways to write patterns. Different authors have different way of organizing the ideas presented. Alexander's original patterns were presented in a fairly informal, narrative style. The patterns presented in "<a class="link" href="books/books.part.xml#0201633612">Design Patterns</a>" book were much more fine grained, decomposing each pattern into many sections. The structure used depends on several factors. Each author has his or own preferences. Different subject matters may influence the structure. For example more technical subject areas can call for patterns with more structure. Different audiences may call for different structures as well, novice readers may prefer a more prosy style, while more experienced readers may prefer a more structured approach. The form chosen for this site is a middle of the road one, not as prosy as Alexander's patterns in <a class="link" href="books/books.part.xml#0195019199">A Pattern Language</a>, yet not as structured as "<a class="link" href="books/books.part.xml#0201633612">Design Patterns</a>" book either.</p><p>What matters is that there is a consistent structure so patterns are easier to understand and compare.</p><p>Most people would agree that there must be at least five elements in every pattern: a name; a problem description; the context of the problem; the solution; and the rational for the solution. This web site uses the following sections for each pattern:</p><div class="glossary" title="Glossary" id="d55e112"><div class="titlepage"><div><div><h2 class="title">Glossary</h2></div></div></div><dl><dt><a id="d55e119"/>Abstract</dt><dd><p>A brief description of the pattern. No more than a few sentences.</p></dd><dt><a id="d55e131"/>Context</dt><dd><p>The context that the problem appears in. Some problems only arise in certain contexts. Different contexts could require different solutions, leading to different patterns.</p></dd><dt><a id="d55e155"/>Discussion</dt><dd><p>Includes a rationale for the pattern. Explains why this solution works, and possibly why the solution might not work in certain contexts.</p></dd><dt><a id="d55e149"/>Examples</dt><dd><p>Sample(s) of how to apply the pattern. Usually a simple, made-up demonstration.</p></dd><dt><a id="d55e137"/>Forces</dt><dd><p>A description of the elements that influence the problem. These are issues that the effect the solution, and that the solution will try to fix.</p></dd><dt><a id="d55e167"/>Known Uses</dt><dd><p>Describes existing documents where instances of the pattern exist.</p></dd><dt><a id="d55e113"/>Name</dt><dd><p>The name of the pattern.</p></dd><dt><a id="d55e125"/>Problem</dt><dd><p>A description of the problem to be solved.</p></dd><dt><a id="d55e161"/>Related Patterns</dt><dd><p>A list of patterns which may be similar to, specializations of, or generalizations of this pattern. Will discuss how similar patterns differ.</p></dd><dt><a id="d55e143"/>Solution</dt><dd><p>The way to fix the problem.</p></dd></dl></div></div><div class="article" title="Good Design" id="d55e173"><div class="titlepage"><div><h2 class="title">Good Design</h2></div><hr/></div><dl class="toc"><dt>Table of Contents</dt><dd><ol class="article"><li class="section"><a href="#d55e180">Document Size</a></li><li class="section"><a href="#d55e185">Ease of Authoring</a></li><li class="section"><a href="#d55e190">Ease of Processing</a></li><li class="section"><a href="#d55e195">Flexibility</a></li><li class="section"><a href="#d55e200">Consistency</a></li><li class="section"><a href="#d55e205">Amount of Abstraction</a></li></ol></dd></dl><p>The purpose of XML Structural Patterns are to help create document types that are designed well. The goal of a design can be thought of a balancing of forces. There are many competing forces that the designer of a document type must deal with simultaneously. In non-trivial problems, it is impossible for all of the forces to be eliminated completely, so compromises must be made.</p><p>These are some of the forces that the XML document designer must deal with:</p><div class="section" title="Document Size"><div class="titlepage"><h2 class="title" id="d55e180">Document Size</h2></div><p>It is usually better to have short documents. Longer documents take up more disk space, take longer to process by machines and humans, and take longer to transmit across the network.</p></div><div class="section" title="Ease of Authoring"><div class="titlepage"><h2 class="title" id="d55e185">Ease of Authoring</h2></div><p>Documents which are authored by people must be understandable to them. Extremely complex documents will cause authors to make mistakes, waste time, and get frustrated.</p></div><div class="section" title="Ease of Processing"><div class="titlepage"><h2 class="title" id="d55e190">Ease of Processing</h2></div><p>XML documents are ultimately processed by software at some point, and the document structure effects how difficult the processing software will be to write.</p></div><div class="section" title="Flexibility"><div class="titlepage"><h2 class="title" id="d55e195">Flexibility</h2></div><p>This is an indication of how the document instances written for a particular document type can differ. Some document types, such as HTML were meant to provide for a huge variety of documents to be written using them. For other systems, for examples, a payroll processing system, very strict rules about how the data is to be presented is needed.</p></div><div class="section" title="Consistency"><div class="titlepage"><h2 class="title" id="d55e200">Consistency</h2></div><p>Consistency is important for documents to be usable. Inconsistencies lead to errors and misunderstandings.</p></div><div class="section" title="Amount of Abstraction"><div class="titlepage"><h2 class="title" id="d55e205">Amount of Abstraction</h2></div><p>The granularity and types of abstraction used in a document type will vary depending on the context. A date could be marked up as</p><pre class="programlisting">&lt;Date&gt;12-10-2000&lt;/Date&gt;

or
&lt;Date&gt; &lt;Month&gt;Dec&lt;/Month&gt; &lt;Day&gt;10&lt;/Day&gt; &lt;Year&gt;2000&lt;/Year&gt; &lt;/Date&gt;.</pre><p>Which one is more appropriate depends on the situation where it is used.</p></div></div><div class="article" title="Journey" id="d55e214"><div class="titlepage"><div><h2 class="title">Journey</h2></div><hr/></div><p>This page provides an overview of the patterns on this site. It is written in a more informal, narrative fashion then other indexes, to provide a gentler introduction to the patterns. This description of the patterns should give a good idea of how the different patterns relate, and roughly in what order they will be used.</p><p>When creating a system a data representation must be chosen for information, one possibility is to Use XML. After deciding on XML, investigate existing schema's to see if the project can Reuse Document Types.</p><p>Once XML has been chosen as a data representation, it must be determined what the root elements are, or if multiple document types should be used. Multiple Document Types can be used to represent a range of different document types, or if documents are related and have some commonalities, a Multi Root Document Types can be used. If multiple transaction types are needed a Universal Root can be used. To separate concerns such as transport of the data from the data itself, an Envelope can be used.</p><p>To create structure in a document, element types which represent abstractions are needed. Name these abstractions using Short Understandable Names These can be based on domain concepts and become Domain Element. To add more structure Container Element can be used. When containers of like element types are needed a Collection Element can be used. To make the documents easier to use for authors, abstraction can be added with Choice Reducing Container and Optional Container Element</p><p>When creating these abstractions, some metadata will be needed to be placed in the document. Care should be taken to Separate Metadata and Data. This can be done by placing Metadata in Separate Document or by using a Head-Body. When creating the structure, put Metadata First.</p><p>It must be decided how to organize these abstractions. When one abstraction references another one, that is when one abstraction uses information that is declared in another one, Declare Before First Use. When the same information needs to be referenced from many places, use a Flyweight. A Referenced Note can be used when an area of text needs to reference an note in another area of the text. The natural way to structure information in XML is using a hierarchical format, however it is sometimes better to use a more graph-like structure using Marketplace.</p><p>Sometimes a document designer will not be able to foresee all of the uses of a document type, in that case a Catch-All Element can be used to easily introduce elements from other DTDs. Role Attribute and Extensible Content Model can be used to make a more flexible document type by adding element that can be introduced by the document author.</p><p>To make documents easier to use, consistency is important. Common Attributes and Consistent Element Set can be used to provide this consistency.</p></div></div><div class="part" title="Part III. Patterns" id="d55e233"><div class="titlepage"><div><div><h1 class="title">Part III. Patterns</h1></div></div></div><dl class="toc"><dt>Table of Contents</dt><dd><ol class="part"><li class="chapter"><a href="#d55e236">Document Roots</a><ol><li class="section"><a href="#d55e243">Multi Root Document Types</a><ol><li class="section"><a href="#d55e250">Problem</a></li><li class="section"><a href="#d55e255">Context</a></li><li class="section"><a href="#d55e260">Forces</a></li><li class="section"><a href="#d55e265">Solution</a></li><li class="section"><a href="#d55e270">Examples</a></li><li class="section"><a href="#d55e281">Discussion</a></li><li class="section"><a href="#d55e286">Related Patterns</a></li><li class="section"><a href="#d55e291">Known Uses</a></li></ol></li><li class="section"><a href="#d55e296">Multiple Document Types</a><ol><li class="section"><a href="#d55e303">Problem</a></li><li class="section"><a href="#d55e308">Context</a></li><li class="section"><a href="#d55e313">Forces</a></li><li class="section"><a href="#d55e318">Solution</a></li><li class="section"><a href="#d55e323">Examples</a></li><li class="section"><a href="#d55e338">Discussion</a></li><li class="section"><a href="#d55e345">Related Patterns</a></li><li class="section"><a href="#d55e350">Known Uses</a></li></ol></li><li class="section"><a href="#d55e355">Universal Root</a><ol><li class="section"><a href="#d55e362">Problem</a></li><li class="section"><a href="#d55e367">Context</a></li><li class="section"><a href="#d55e372">Forces</a></li><li class="section"><a href="#d55e377">Solution</a></li><li class="section"><a href="#d55e382">Examples</a></li><li class="section"><a href="#d55e389">Discussion</a></li><li class="section"><a href="#d55e400">Related Patterns</a></li><li class="section"><a href="#d55e405">Known Uses</a></li></ol></li></ol></li><li class="chapter"><a href="#d55e410">Metadata</a><ol><li class="section"><a href="#d55e417">Head-Body</a><ol><li class="section"><a href="#d55e424">Problem</a></li><li class="section"><a href="#d55e429">Context</a></li><li class="section"><a href="#d55e434">Forces</a></li><li class="section"><a href="#d55e439">Solution</a></li><li class="section"><a href="#d55e446">Examples</a></li><li class="section"><a href="#d55e457">Discussion</a></li><li class="section"><a href="#d55e470">Related Patterns</a></li><li class="section"><a href="#d55e475">Known Uses</a></li><li class="section"><a href="#d55e482">References</a></li></ol></li><li class="section"><a href="#d55e487">Metadata First</a><ol><li class="section"><a href="#d55e494">Problem</a></li><li class="section"><a href="#d55e499">Context</a></li><li class="section"><a href="#d55e504">Forces</a></li><li class="section"><a href="#d55e509">Solution</a></li><li class="section"><a href="#d55e520">Examples</a></li><li class="section"><a href="#d55e527">Discussion</a></li><li class="section"><a href="#d55e532">Related Patterns</a></li><li class="section"><a href="#d55e537">Known Uses</a></li></ol></li><li class="section"><a href="#d55e542">Metadata in Separate Document</a><ol><li class="section"><a href="#d55e549">Problem</a></li><li class="section"><a href="#d55e554">Context</a></li><li class="section"><a href="#d55e559">Forces</a></li><li class="section"><a href="#d55e564">Solution</a></li><li class="section"><a href="#d55e573">Examples</a></li><li class="section"><a href="#d55e588">Discussion</a></li><li class="section"><a href="#d55e597">Related Patterns</a></li><li class="section"><a href="#d55e602">Known Uses</a></li><li class="section"><a href="#d55e607">References</a></li></ol></li><li class="section"><a href="#d55e612">Separate Metadata and Data</a><ol><li class="section"><a href="#d55e619">Problem</a></li><li class="section"><a href="#d55e628">Context</a></li><li class="section"><a href="#d55e633">Forces</a></li><li class="section"><a href="#d55e638">Solution</a></li><li class="section"><a href="#d55e643">Examples</a></li><li class="section"><a href="#d55e648">Discussion</a></li><li class="section"><a href="#d55e653">Related Patterns</a></li><li class="section"><a href="#d55e658">Known Uses</a></li></ol></li></ol></li><li class="chapter"><a href="#d55e665">Abstraction</a><ol><li class="section"><a href="#d55e672">Choice Reducing Container</a><ol><li class="section"><a href="#d55e679">Problem</a></li><li class="section"><a href="#d55e684">Context</a></li><li class="section"><a href="#d55e689">Forces</a></li><li class="section"><a href="#d55e694">Solution</a></li><li class="section"><a href="#d55e699">Examples</a></li><li class="section"><a href="#d55e716">Discussion</a></li><li class="section"><a href="#d55e723">Related Patterns</a></li><li class="section"><a href="#d55e730">Known Uses</a></li><li class="section"><a href="#d55e735">References</a></li></ol></li><li class="section"><a href="#d55e740">Collection Element</a><ol><li class="section"><a href="#d55e747">Problem</a></li><li class="section"><a href="#d55e752">Context</a></li><li class="section"><a href="#d55e757">Forces</a></li><li class="section"><a href="#d55e762">Solution</a></li><li class="section"><a href="#d55e767">Examples</a></li><li class="section"><a href="#d55e787">Discussion</a></li><li class="section"><a href="#d55e796">Related Patterns</a></li><li class="section"><a href="#d55e801">Known Uses</a></li></ol></li><li class="section"><a href="#d55e809">Container Element</a><ol><li class="section"><a href="#d55e816">Problem</a></li><li class="section"><a href="#d55e821">Context</a></li><li class="section"><a href="#d55e826">Forces</a></li><li class="section"><a href="#d55e831">Solution</a></li><li class="section"><a href="#d55e836">Examples</a></li><li class="section"><a href="#d55e847">Discussion</a></li><li class="section"><a href="#d55e854">Related Patterns</a></li><li class="section"><a href="#d55e863">Known Uses</a></li><li class="section"><a href="#d55e868">References</a></li></ol></li><li class="section"><a href="#d55e873">Domain Element</a><ol><li class="section"><a href="#d55e880">Problem</a></li><li class="section"><a href="#d55e885">Context</a></li><li class="section"><a href="#d55e890">Forces</a></li><li class="section"><a href="#d55e895">Solution</a></li><li class="section"><a href="#d55e900">Examples</a></li><li class="section"><a href="#d55e907">Discussion</a></li><li class="section"><a href="#d55e914">Related Patterns</a></li><li class="section"><a href="#d55e919">Known Uses</a></li></ol></li><li class="section"><a href="#d55e928">Optional Container Element</a><ol><li class="section"><a href="#d55e935">Problem</a></li><li class="section"><a href="#d55e940">Context</a></li><li class="section"><a href="#d55e945">Forces</a></li><li class="section"><a href="#d55e950">Solution</a></li><li class="section"><a href="#d55e955">Examples</a></li><li class="section"><a href="#d55e968">Discussion</a></li><li class="section"><a href="#d55e977">Related Patterns</a></li><li class="section"><a href="#d55e982">Known Uses</a></li><li class="section"><a href="#d55e991">Contributions</a></li></ol></li></ol></li><li class="chapter"><a href="#d55e996">Organization</a><ol><li class="section"><a href="#d55e1003">Declare Before First Use</a><ol><li class="section"><a href="#d55e1010">Problem</a></li><li class="section"><a href="#d55e1015">Context</a></li><li class="section"><a href="#d55e1020">Forces</a></li><li class="section"><a href="#d55e1025">Solution</a></li><li class="section"><a href="#d55e1030">Examples</a></li><li class="section"><a href="#d55e1035">Discussion</a></li><li class="section"><a href="#d55e1040">Related Patterns</a></li><li class="section"><a href="#d55e1045">Known Uses</a></li></ol></li><li class="section"><a href="#d55e1050">Envelope</a><ol><li class="section"><a href="#d55e1059">Problem</a></li><li class="section"><a href="#d55e1064">Context</a></li><li class="section"><a href="#d55e1069">Forces</a></li><li class="section"><a href="#d55e1076">Solution</a></li><li class="section"><a href="#d55e1081">Examples</a></li><li class="section"><a href="#d55e1088">Discussion</a></li><li class="section"><a href="#d55e1093">Related Patterns</a></li><li class="section"><a href="#d55e1098">Known Uses</a></li><li class="section"><a href="#d55e1103">References</a></li></ol></li><li class="section"><a href="#d55e1108">Flyweight</a><ol><li class="section"><a href="#d55e1115">Problem</a></li><li class="section"><a href="#d55e1130">Context</a></li><li class="section"><a href="#d55e1135">Forces</a></li><li class="section"><a href="#d55e1140">Solution</a></li><li class="section"><a href="#d55e1157">Examples</a></li><li class="section"><a href="#d55e1181">Discussion</a></li><li class="section"><a href="#d55e1190">Related Patterns</a></li><li class="section"><a href="#d55e1195">Known Uses</a></li></ol></li><li class="section"><a href="#d55e1202">Marketplace</a><ol><li class="section"><a href="#d55e1209">Problem</a></li><li class="section"><a href="#d55e1218">Context</a></li><li class="section"><a href="#d55e1223">Forces</a></li><li class="section"><a href="#d55e1228">Solution</a></li><li class="section"><a href="#d55e1233">Examples</a></li><li class="section"><a href="#d55e1242">Discussion</a></li><li class="section"><a href="#d55e1247">Related Patterns</a></li><li class="section"><a href="#d55e1252">Known Uses</a></li><li class="section"><a href="#d55e1257">References</a></li></ol></li><li class="section"><a href="#d55e1262">Referenced Note</a><ol><li class="section"><a href="#d55e1271">Problem</a></li><li class="section"><a href="#d55e1276">Context</a></li><li class="section"><a href="#d55e1281">Forces</a></li><li class="section"><a href="#d55e1286">Solution</a></li><li class="section"><a href="#d55e1302">Examples</a></li><li class="section"><a href="#d55e1311">Discussion</a></li><li class="section"><a href="#d55e1318">Related Patterns</a></li><li class="section"><a href="#d55e1325">Known Uses</a></li><li class="section"><a href="#d55e1330">References</a></li></ol></li></ol></li><li class="chapter"><a href="#d55e1335">Flexibility</a><ol><li class="section"><a href="#d55e1342">Catch-All Element</a><ol><li class="section"><a href="#d55e1349">Problem</a></li><li class="section"><a href="#d55e1354">Context</a></li><li class="section"><a href="#d55e1359">Forces</a></li><li class="section"><a href="#d55e1366">Solution</a></li><li class="section"><a href="#d55e1371">Examples</a></li><li class="section"><a href="#d55e1390">Discussion</a></li><li class="section"><a href="#d55e1397">Related Patterns</a></li><li class="section"><a href="#d55e1402">Known Uses</a></li></ol></li><li class="section"><a href="#d55e1407">Extensible Content Model</a><ol><li class="section"><a href="#d55e1414">Problem</a></li><li class="section"><a href="#d55e1419">Context</a></li><li class="section"><a href="#d55e1424">Forces</a></li><li class="section"><a href="#d55e1429">Solution</a></li><li class="section"><a href="#d55e1434">Examples</a></li><li class="section"><a href="#d55e1482">Discussion</a></li><li class="section"><a href="#d55e1489">Related Patterns</a></li><li class="section"><a href="#d55e1494">Known Uses</a></li><li class="section"><a href="#d55e1503">References</a></li></ol></li><li class="section"><a href="#d55e1508">Generic Element</a><ol><li class="section"><a href="#d55e1515">Problem</a></li><li class="section"><a href="#d55e1520">Context</a></li><li class="section"><a href="#d55e1525">Forces</a></li><li class="section"><a href="#d55e1530">Solution</a></li><li class="section"><a href="#d55e1535">Examples</a></li><li class="section"><a href="#d55e1540">Discussion</a></li><li class="section"><a href="#d55e1547">Related Patterns</a></li><li class="section"><a href="#d55e1552">Known Uses</a></li><li class="section"><a href="#d55e1557">References</a></li></ol></li><li class="section"><a href="#d55e1562">Role Attribute</a><ol><li class="section"><a href="#d55e1569">Problem</a></li><li class="section"><a href="#d55e1574">Context</a></li><li class="section"><a href="#d55e1579">Forces</a></li><li class="section"><a href="#d55e1584">Solution</a></li><li class="section"><a href="#d55e1589">Examples</a></li><li class="section"><a href="#d55e1600">Discussion</a></li><li class="section"><a href="#d55e1607">Related Patterns</a></li><li class="section"><a href="#d55e1612">Known Uses</a></li></ol></li></ol></li><li class="chapter"><a href="#d55e1619">Consistency</a><ol><li class="section"><a href="#d55e1626">Common Attributes</a><ol><li class="section"><a href="#d55e1633">Problem</a></li><li class="section"><a href="#d55e1638">Context</a></li><li class="section"><a href="#d55e1643">Forces</a></li><li class="section"><a href="#d55e1648">Solution</a></li><li class="section"><a href="#d55e1653">Examples</a></li><li class="section"><a href="#d55e1670">Discussion</a></li><li class="section"><a href="#d55e1677">Related Patterns</a></li><li class="section"><a href="#d55e1682">Known Uses</a></li><li class="section"><a href="#d55e1695">References</a></li><li class="section"><a href="#d55e1700">Contributions</a></li></ol></li><li class="section"><a href="#d55e1705">Consistent Element Set</a><ol><li class="section"><a href="#d55e1712">Problem</a></li><li class="section"><a href="#d55e1717">Context</a></li><li class="section"><a href="#d55e1722">Forces</a></li><li class="section"><a href="#d55e1727">Solution</a></li><li class="section"><a href="#d55e1732">Examples</a></li><li class="section"><a href="#d55e1751">Discussion</a></li><li class="section"><a href="#d55e1756">Related Patterns</a></li><li class="section"><a href="#d55e1761">Known Uses</a></li></ol></li><li class="section"><a href="#d55e1766">Parallel Design</a><ol><li class="section"><a href="#d55e1773">Problem</a></li><li class="section"><a href="#d55e1778">Context</a></li><li class="section"><a href="#d55e1783">Forces</a></li><li class="section"><a href="#d55e1788">Solution</a></li><li class="section"><a href="#d55e1793">Examples</a></li><li class="section"><a href="#d55e1800">Discussion</a></li><li class="section"><a href="#d55e1805">Related Patterns</a></li><li class="section"><a href="#d55e1810">Known Uses</a></li><li class="section"><a href="#d55e1819">References</a></li></ol></li></ol></li><li class="chapter"><a href="#d55e1824">Miscellaneous</a><ol><li class="section"><a href="#d55e1831">Content Type Label</a><ol><li class="section"><a href="#d55e1838">Problem</a></li><li class="section"><a href="#d55e1843">Context</a></li><li class="section"><a href="#d55e1848">Forces</a></li><li class="section"><a href="#d55e1853">Solution</a></li><li class="section"><a href="#d55e1858">Examples</a></li><li class="section"><a href="#d55e1865">Discussion</a></li><li class="section"><a href="#d55e1874">Related Patterns</a></li><li class="section"><a href="#d55e1879">Known Uses</a></li><li class="section"><a href="#d55e1888">References</a></li></ol></li><li class="section"><a href="#d55e1893">Reuse Document Types</a><ol><li class="section"><a href="#d55e1900">Problem</a></li><li class="section"><a href="#d55e1905">Context</a></li><li class="section"><a href="#d55e1910">Forces</a></li><li class="section"><a href="#d55e1917">Solution</a></li><li class="section"><a href="#d55e1922">Examples</a></li><li class="section"><a href="#d55e1927">Discussion</a></li><li class="section"><a href="#d55e1957">Related Patterns</a></li><li class="section"><a href="#d55e1962">Known Uses</a></li><li class="section"><a href="#d55e1967">References</a></li></ol></li><li class="section"><a href="#d55e1972">Short Understandable Names</a><ol><li class="section"><a href="#d55e1979">Problem</a></li><li class="section"><a href="#d55e1984">Context</a></li><li class="section"><a href="#d55e1989">Forces</a></li><li class="section"><a href="#d55e1994">Solution</a></li><li class="section"><a href="#d55e1999">Examples</a></li><li class="section"><a href="#d55e2004">Discussion</a></li><li class="section"><a href="#d55e2015">Related Patterns</a></li><li class="section"><a href="#d55e2020">Known Uses</a></li></ol></li><li class="section"><a href="#d55e2025">Use XML</a><ol><li class="section"><a href="#d55e2032">Problem</a></li><li class="section"><a href="#d55e2037">Context</a></li><li class="section"><a href="#d55e2064">Forces</a></li><li class="section"><a href="#d55e2069">Solution</a></li><li class="section"><a href="#d55e2074">Examples</a></li><li class="section"><a href="#d55e2079">Discussion</a></li><li class="section"><a href="#d55e2084">Related Patterns</a></li><li class="section"><a href="#d55e2089">Known Uses</a></li><li class="section"><a href="#d55e2141">References</a></li></ol></li></ol></li></ol></dd></dl><div class="chapter" title="Chapter 1. Document Roots" id="d55e236"><div class="titlepage"><h2 class="title">Chapter 1. Document Roots</h2><div><div class="abstract" title="Abstract"><p class="title"><strong>Abstract</strong></p><p>Patterns about how to determine what the root element(s) should be.</p></div></div></div><dl class="toc"><dt>Table of Contents</dt><dd><ol class="chapter"><li class="section"><a href="#d55e243">Multi Root Document Types</a><ol><li class="section"><a href="#d55e250">Problem</a></li><li class="section"><a href="#d55e255">Context</a></li><li class="section"><a href="#d55e260">Forces</a></li><li class="section"><a href="#d55e265">Solution</a></li><li class="section"><a href="#d55e270">Examples</a></li><li class="section"><a href="#d55e281">Discussion</a></li><li class="section"><a href="#d55e286">Related Patterns</a></li><li class="section"><a href="#d55e291">Known Uses</a></li></ol></li><li class="section"><a href="#d55e296">Multiple Document Types</a><ol><li class="section"><a href="#d55e303">Problem</a></li><li class="section"><a href="#d55e308">Context</a></li><li class="section"><a href="#d55e313">Forces</a></li><li class="section"><a href="#d55e318">Solution</a></li><li class="section"><a href="#d55e323">Examples</a></li><li class="section"><a href="#d55e338">Discussion</a></li><li class="section"><a href="#d55e345">Related Patterns</a></li><li class="section"><a href="#d55e350">Known Uses</a></li></ol></li><li class="section"><a href="#d55e355">Universal Root</a><ol><li class="section"><a href="#d55e362">Problem</a></li><li class="section"><a href="#d55e367">Context</a></li><li class="section"><a href="#d55e372">Forces</a></li><li class="section"><a href="#d55e377">Solution</a></li><li class="section"><a href="#d55e382">Examples</a></li><li class="section"><a href="#d55e389">Discussion</a></li><li class="section"><a href="#d55e400">Related Patterns</a></li><li class="section"><a href="#d55e405">Known Uses</a></li></ol></li></ol></dd></dl><div class="section" title="Multi Root Document Types"><div class="titlepage"><h2 class="title" id="d55e243">Multi Root Document Types</h2><div><div class="abstract" title="Abstract"><p class="title"><strong>Abstract</strong></p><p>A single document type with multiple root elements is used to handle varying
				documents that may exist within a system.</p></div></div></div><div class="section" title="Problem"><div class="titlepage"><h3 class="title" id="d55e250">Problem</h3></div><p>A system needs to handle varying types of documents. These are somehow related, yet
			each type of document needs a unique identity provided by a document root.</p></div><div class="section" title="Context"><div class="titlepage"><h3 class="title" id="d55e255">Context</h3></div><p>Systems where varying types of documents need to be processed, but the different
			documents are closely related.</p></div><div class="section" title="Forces"><div class="titlepage"><h3 class="title" id="d55e260">Forces</h3></div><p>Maintainability of the system is effected by how the document types are
			organized.</p></div><div class="section" title="Solution"><div class="titlepage"><h3 class="title" id="d55e265">Solution</h3></div><p>Create a single declaration with multiple root elements for the different document
			types.</p></div><div class="section" title="Examples"><div class="titlepage"><h3 class="title" id="d55e270">Examples</h3></div><p>The two documents below show two different bank transactions, a deposit and a
			withdrawal. The document have different root elements, but many other common elements.
			Both of these documents use the same DTD, but declare different roots.
		</p><div class="literallayout"><p><br/>
&lt;!DOCTYPE "Deposit" SYSTEM "bank.dtd"&gt;<br/>
&lt;Deposit&gt;<br/>
&lt;Account id="123"/&gt;<br/>
&lt;Amount currency="USD"&gt;100.00&lt;/Amount&gt;<br/>
&lt;Date&gt;05-10-2000&lt;/Date&gt;<br/>
&lt;/Deposit&gt;<br/>
</p></div><p>

		                </p><div class="literallayout"><p><br/>
&lt;!DOCTYPE "Withdrawal" SYSTEM "bank.dtd"&gt;<br/>
&lt;Withdrawal&gt;<br/>
&lt;Account id="123"/&gt;<br/>
&lt;Amount currency="USD"&gt;100.00&lt;/Amount&gt;<br/>
&lt;Date&gt;05-10-2000&lt;/Date&gt;<br/>
&lt;/Withdrawal&gt;<br/>
		</p></div><p>
			            </p></div><div class="section" title="Discussion"><div class="titlepage"><h3 class="title" id="d55e281">Discussion</h3></div><p>Allows the different document types to easily share structure. Having all of the
			related document types declared in a single file can increase maintainability. However,
			if revisions need to be made to the different document types separately, it might be
			better having separate declarations.</p></div><div class="section" title="Related Patterns"><div class="titlepage"><h3 class="title" id="d55e286">Related Patterns</h3></div><p>Universal Root and Multiple Document Types are alternatives.</p></div><div class="section" title="Known Uses"><div class="titlepage"><h3 class="title" id="d55e291">Known Uses</h3></div><p>In DocBook the root element can be a set or a book element.</p></div></div><div class="section" title="Multiple Document Types"><div class="titlepage"><h2 class="title" id="d55e296">Multiple Document Types</h2><div><div class="abstract" title="Abstract"><p class="title"><strong>Abstract</strong></p><p>When a system needs to represent a range of different document types, each document
				type can be represented by a completely separate declarations.</p></div></div></div><div class="section" title="Problem"><div class="titlepage"><h3 class="title" id="d55e303">Problem</h3></div><p>A system needs to represent different types of information. This information may be
			used at different times, or may be used by different parts of the system.</p></div><div class="section" title="Context"><div class="titlepage"><h3 class="title" id="d55e308">Context</h3></div><p>Systems which need to represent a variety of information at different times or
			places.</p></div><div class="section" title="Forces"><div class="titlepage"><h3 class="title" id="d55e313">Forces</h3></div><p>Processing and authoring of documents can be simplified if different document types
			are used to represent different sets of data.</p></div><div class="section" title="Solution"><div class="titlepage"><h3 class="title" id="d55e318">Solution</h3></div><p>Use different document types to represent different sets of data within the
			system.</p></div><div class="section" title="Examples"><div class="titlepage"><h3 class="title" id="d55e323">Examples</h3></div><p>In a payroll system, data about the Employees, and data about the hours they work can
			be represented by separate documents.</p><div class="example"><a id="d55e328"/><p class="title"><strong>Example 1.1. Employees.dtd:</strong></p><div class="example-contents"><div class="literallayout"><p><br/>
&lt;!ELEMENT Employee (Name, HourlyRate)&gt;<br/>
&lt;!ATTLIST Employee id ID #REQUIRED&gt;<br/>
<br/>
&lt;!ELEMENT Name (#PCDATA)&gt;<br/>
<br/>
&lt;!ELEMENT HourlyRate (#PCDATA)&gt;<br/>
</p></div></div></div><br class="example-break"/><div class="example"><a id="d55e333"/><p class="title"><strong>Example 1.2. HoursWorked.dtd:</strong></p><div class="example-contents"><div class="literallayout"><p><br/>
&lt;!ELEMENT PayPeriod (Employee+)&gt;<br/>
&lt;!ATTLIST PayPeriod<br/>
StartDate #CDATA<br/>
EndDate   #CDATA&gt;<br/>
<br/>
&lt;!ELEMENT Employee (HoursWorked)&gt;<br/>
&lt;!ATTLIST Employee id NMTOKEN&gt;<br/>
<br/>
&lt;!ELEMENT HoursWorked (#PCDATA)&gt;<br/>
</p></div></div></div><br class="example-break"/></div><div class="section" title="Discussion"><div class="titlepage"><h3 class="title" id="d55e338">Discussion</h3></div><p>If different people will authoring the different types of documents it is a good idea
			to have completely separate document types, because authors will not need to be exposed
			to parts of the document types that are not needed.</p><p>Having separate document types allows the different DTDs to be versioned
			independently.</p></div><div class="section" title="Related Patterns"><div class="titlepage"><h3 class="title" id="d55e345">Related Patterns</h3></div><p>Universal Root allows multiple types of data under one document root. Multi Root
			Document Types allows for multiple types of documents to be declared in a single
			declaration.</p></div><div class="section" title="Known Uses"><div class="titlepage"><h3 class="title" id="d55e350">Known Uses</h3></div><p>…</p></div></div><div class="section" title="Universal Root"><div class="titlepage"><h2 class="title" id="d55e355">Universal Root</h2><div><div class="abstract" title="Abstract"><p class="title"><strong>Abstract</strong></p><p>Provide a single root element that contains an option of multiple elements. Often used
				for different transaction types within a single document type.</p></div></div></div><div class="section" title="Problem"><div class="titlepage"><h3 class="title" id="d55e362">Problem</h3></div><p>There are several different types of document that need to be processed. Providing a
			single root element allows for all of the different types of document to be defined by a
			single DTD. When a processor receives this document, it will know which type of document
			to expect by inspecting the child element of the root element.</p></div><div class="section" title="Context"><div class="titlepage"><h3 class="title" id="d55e367">Context</h3></div><p>Universal Root is useful when a system has several different, but related, document
			types to be processed. A transactional processor would be an example of such a
			system.</p></div><div class="section" title="Forces"><div class="titlepage"><h3 class="title" id="d55e372">Forces</h3></div><p>Having multiple, distinct document types can increase the maintenance burden of a
			system. Document types that may be related, but are declared in separate files can start
			to stray from commonalities that can be taken advantage of.</p></div><div class="section" title="Solution"><div class="titlepage"><h3 class="title" id="d55e377">Solution</h3></div><p>Create a document type that has a single root element.</p></div><div class="section" title="Examples"><div class="titlepage"><h3 class="title" id="d55e382">Examples</h3></div><div class="literallayout"><p>&lt;!ELEMENT Transaction<br/>
(AddAddress | RemoveAddress | UpdateAddress)&gt;<br/>
<br/>
&lt;!ELEMENT AddAddress<br/>
(AddressBookEntry)&gt;<br/>
<br/>
&lt;!ELEMENT RemoveAddress<br/>
(AddressID)&gt;<br/>
<br/>
&lt;!ELEMENT UpdateAddress<br/>
(AddressID, AddressBookEntry)&gt;<br/>
<br/>
<br/>
&lt;Transaction&gt;<br/>
&lt;AddAddress&gt;<br/>
&lt;AddressBookEntry&gt; ... &lt;/AddressBookEntry&gt;<br/>
&lt;/AddAddress&gt;<br/>
&lt;/Transaction&gt;<br/>
</p></div><p>In this example an online address book application is being developed. There are
			several transactions that can take place, lick adding new entries, deleting entries,
			updating entries.</p></div><div class="section" title="Discussion"><div class="titlepage"><h3 class="title" id="d55e389">Discussion</h3></div><p>This allows a way for several related types of documents to be grouped into a single
			document type structure. A processing system will always know which DTD to expect, but
			can still handle the documents differently based on the first nested element type. This
			makes sharing common definitions between the different document easy.</p><p>This is also a way that multiple XML document can be gathered into a single larger
			document. For example a log file might consist of several fragments, for example:</p><div class="literallayout"><p><br/>
&lt;Log&gt;<br/>
&lt;Time&gt;Jan 15, 1999 10:58AM&lt;/Time&gt;<br/>
&lt;Event&gt;Startup&lt;/Event&gt;<br/>
&lt;/Log&gt;<br/>
&lt;Log&gt;<br/>
&lt;Time&gt;Jan 15, 1999 11:02AM&lt;/Time&gt;<br/>
&lt;Event&gt;Message Received from Bob&lt;/Event&gt;<br/>
&lt;/Log&gt;<br/>
...<br/>
</p></div><p>Since there is no root element in the file it cannot be processed "as is".
			To process this, one can prepend a start tag, for example "&lt;LogFile&gt;",
			in front of the file, and append the end tag "&lt;/LogFile&gt;" to the end of
			the file to be able to process it as a single XML document.</p></div><div class="section" title="Related Patterns"><div class="titlepage"><h3 class="title" id="d55e400">Related Patterns</h3></div><p>Multi Root Document Types and Multiple Document Types are alternatives to this
			pattern.</p></div><div class="section" title="Known Uses"><div class="titlepage"><h3 class="title" id="d55e405">Known Uses</h3></div><p>…</p></div></div></div><div class="chapter" title="Chapter 2. Metadata" id="d55e410"><div class="titlepage"><h2 class="title">Chapter 2. Metadata</h2><div><div class="abstract" title="Abstract"><p class="title"><strong>Abstract</strong></p><p>How to include metadata in documents.</p></div></div></div><dl class="toc"><dt>Table of Contents</dt><dd><ol class="chapter"><li class="section"><a href="#d55e417">Head-Body</a><ol><li class="section"><a href="#d55e424">Problem</a></li><li class="section"><a href="#d55e429">Context</a></li><li class="section"><a href="#d55e434">Forces</a></li><li class="section"><a href="#d55e439">Solution</a></li><li class="section"><a href="#d55e446">Examples</a></li><li class="section"><a href="#d55e457">Discussion</a></li><li class="section"><a href="#d55e470">Related Patterns</a></li><li class="section"><a href="#d55e475">Known Uses</a></li><li class="section"><a href="#d55e482">References</a></li></ol></li><li class="section"><a href="#d55e487">Metadata First</a><ol><li class="section"><a href="#d55e494">Problem</a></li><li class="section"><a href="#d55e499">Context</a></li><li class="section"><a href="#d55e504">Forces</a></li><li class="section"><a href="#d55e509">Solution</a></li><li class="section"><a href="#d55e520">Examples</a></li><li class="section"><a href="#d55e527">Discussion</a></li><li class="section"><a href="#d55e532">Related Patterns</a></li><li class="section"><a href="#d55e537">Known Uses</a></li></ol></li><li class="section"><a href="#d55e542">Metadata in Separate Document</a><ol><li class="section"><a href="#d55e549">Problem</a></li><li class="section"><a href="#d55e554">Context</a></li><li class="section"><a href="#d55e559">Forces</a></li><li class="section"><a href="#d55e564">Solution</a></li><li class="section"><a href="#d55e573">Examples</a></li><li class="section"><a href="#d55e588">Discussion</a></li><li class="section"><a href="#d55e597">Related Patterns</a></li><li class="section"><a href="#d55e602">Known Uses</a></li><li class="section"><a href="#d55e607">References</a></li></ol></li><li class="section"><a href="#d55e612">Separate Metadata and Data</a><ol><li class="section"><a href="#d55e619">Problem</a></li><li class="section"><a href="#d55e628">Context</a></li><li class="section"><a href="#d55e633">Forces</a></li><li class="section"><a href="#d55e638">Solution</a></li><li class="section"><a href="#d55e643">Examples</a></li><li class="section"><a href="#d55e648">Discussion</a></li><li class="section"><a href="#d55e653">Related Patterns</a></li><li class="section"><a href="#d55e658">Known Uses</a></li></ol></li></ol></dd></dl><div class="section" title="Head-Body"><div class="titlepage"><h2 class="title" id="d55e417">Head-Body</h2><div><div class="abstract" title="Abstract"><p class="title"><strong>Abstract</strong></p><p>When a large amount of metadata needs to be included in an element the designer may
				create two children for the element, one for the metadata and one for the body of the
				document.</p></div></div></div><div class="section" title="Problem"><div class="titlepage"><h3 class="title" id="d55e424">Problem</h3></div><p>Sometimes, an element has a large amount of metadata, and this metadata may need to be
			structured. In common XML usage, attributes are used for metadata. But with a large
			amount of metadata it is difficult for authors to include this information within
			attributes, which have limited structure. Including metadata as sibling elements of
			content elements leads to the potential to confuse the metadata and the data meant to be
			in the body of the element.</p></div><div class="section" title="Context"><div class="titlepage"><h3 class="title" id="d55e429">Context</h3></div><p>There is a large amount of metadata about some piece of content. For example
			information about the title, creation date, and authors of a document should be included
			with the document, but this is not really information that belong in the body of the
			document.</p></div><div class="section" title="Forces"><div class="titlepage"><h3 class="title" id="d55e434">Forces</h3></div><p>A clear separation is needed between what is metadata and what is data that forms the
			body of the document. This affects ease of authoring and processing of the document
			because the context of the data is implied. The metadata needed for an element needs to
			structured in such a way that attributes are difficult to use.</p></div><div class="section" title="Solution"><div class="titlepage"><h3 class="title" id="d55e439">Solution</h3></div><p>Create head and body elements. The element that contains the head and body elements
			can be referred to as the skeleton element. The metadata for the document goes into the
			head element, and the data for the document itself goes into the body element. The XML
			takes the following form:</p><div class="literallayout"><p><br/>
&lt;Skeleton&gt;<br/>
&lt;Head&gt;<br/>
... meta information ...<br/>
&lt;/Head&gt;<br/>
&lt;Body&gt;<br/>
... body of document ...<br/>
&lt;/Body&gt;<br/>
&lt;/Skeletion&gt;<br/>
</p></div></div><div class="section" title="Examples"><div class="titlepage"><h3 class="title" id="d55e446">Examples</h3></div><div class="literallayout"><p><br/>
&lt;Document&gt;<br/>
&lt;Head&gt;<br/>
&lt;Author&gt;John Doe&lt;/Author&gt;<br/>
&lt;Author&gt;Frank Black&lt;/Author&gt;<br/>
&lt;CreationDate&gt;June 16, 1999&lt;/CreationDate&gt;<br/>
&lt;/Head&gt;<br/>
&lt;Body&gt;<br/>
This is a document.<br/>
&lt;/Body&gt;<br/>
&lt;/Document&gt;<br/>
</p></div><p>In this case, the skeleton element is the document root, and the metadata is
			structured information about the authors of the document and the creation date of the
			document. The Head-Body pattern is often used at the document level, but it can also be
			used at levels deeper within a document. For example the pattern could be used inside of
			a Table element like this:</p><div class="literallayout"><p><br/>
&lt;Document&gt;<br/>
&lt;Table&gt;<br/>
&lt;TableHead&gt;<br/>
&lt;Title&gt;<br/>
A &lt;Italic&gt;Sample&lt;Italic&gt; Table<br/>
&lt;/Title&gt;<br/>
&lt;/TableHead&gt;<br/>
&lt;TableBody&gt;<br/>
&lt;Row&gt;Row 1&lt;/Row&gt;<br/>
&lt;Row&gt;Row 2&lt;/Row&gt;<br/>
&lt;/TableBody&gt;<br/>
&lt;/Table&gt;<br/>
&lt;/Document&gt;<br/>
</p></div><p>In this case the skeleton element is a table, which needs structure for its Title
			data.</p></div><div class="section" title="Discussion"><div class="titlepage"><h3 class="title" id="d55e457">Discussion</h3></div><p>Two new elements are introduced which distinguish the metadata from the body of the
			document. This gives processing software context to distinguish these two types of
			data.</p><p>Because this introduced two additional elements, the resulting documents are larger
			than they would be without the application of this pattern</p><p>The resulting documents are often easier to understand because of the clear separation
			of metadata and the document body itself. The metadata is in the Head element and the
			document itself goes in the Body element. Authors and processing software can clearly
			distinguish the context of the data they are using.</p><p>Documents are also often easier to process because they allow metadata to be
			structured, unlike if attributes were use for the metadata of the document.</p><p>For an interesting alternative, see Don Park's "Neck" pattern.</p></div><div class="section" title="Related Patterns"><div class="titlepage"><h3 class="title" id="d55e470">Related Patterns</h3></div><p>The Head-Body Pattern consists of two new Container Elements added to the structure of
			the document, one for the Head element, and one for the Body. This is a specialization
			of the Separate Metadata and Data.</p></div><div class="section" title="Known Uses"><div class="titlepage"><h3 class="title" id="d55e475">Known Uses</h3></div><p>HEAD and BODY elements in XHTML.</p><p>SOAP (Simple Object Access Protocol) uses Header and Body Elements inside an Envelope
			element.</p></div><div class="section" title="References"><div class="titlepage"><h3 class="title" id="d55e482">References</h3></div><p>Rick Jelliffe discusses this in a chapter entitled "The Document Shell" in:
			The XML &amp; SGML Cookbook: Recipes for Structured Information</p></div></div><div class="section" title="Metadata First"><div class="titlepage"><h2 class="title" id="d55e487">Metadata First</h2><div><div class="abstract" title="Abstract"><p class="title"><strong>Abstract</strong></p><p>Metadata should appear in a document before the data which it is about.</p></div></div></div><div class="section" title="Problem"><div class="titlepage"><h3 class="title" id="d55e494">Problem</h3></div><p>Many processors (for example SAX based parsers) are stream based. That is, the
			document is processed as it is read in, the whole document is never held in memory at
			the same time. If a piece of metadata appears after the data it refers to, the
			application software will need to store the data, then read the metadata in order to
			know what to do with the data.</p></div><div class="section" title="Context"><div class="titlepage"><h3 class="title" id="d55e499">Context</h3></div><p>Anywhere in the document that metadata appears.</p></div><div class="section" title="Forces"><div class="titlepage"><h3 class="title" id="d55e504">Forces</h3></div><p>The ease and speed of processing a document can be effected by the order in which the
			structures of the document appear.</p></div><div class="section" title="Solution"><div class="titlepage"><h3 class="title" id="d55e509">Solution</h3></div><p>Always make sure that metadata appears in a document before the data it refers to.
			This can be done whether the metadata is attribute data or element data.</p><p>For example, with the following code,</p><div class="literallayout"><p><br/>
&lt;Heading&gt;<br/>
This is a new section&lt;Font size="3"/&gt;<br/>
&lt;/Heading&gt;<br/>
</p></div><p>If the processing software were trying to send this information to a printer, it would
			need to save the text of the heading, read in the font size, send the font size command
			to the printer, and then send the text to the printer. If the font element appeared
			before the text, there would be no need to save the text.</p></div><div class="section" title="Examples"><div class="titlepage"><h3 class="title" id="d55e520">Examples</h3></div><p>This example shows a table element with the height and width elements appearing before
			the actual data of the table. This allows the processing software to start rendering the
			table as the data is read in. If the height and width of the table came after the table
			data, the processing software would need to read in and save all the data before
			starting to display it.</p><div class="literallayout"><p>&lt;Table&gt;<br/>
&lt;height unit="pixels"&gt;100&lt;/height&gt;<br/>
&lt;width unit="pixels"&gt;100&lt;/width&gt;<br/>
&lt;Row&gt;&lt;Col&gt;2&lt;/Col&gt;&lt;Col&gt;3&lt;/Col&gt;&lt;/Row&gt;<br/>
&lt;Row&gt;&lt;Col&gt;8&lt;/Col&gt;&lt;Col&gt;7&lt;/Col&gt;&lt;/Row&gt;<br/>
&lt;/Table&gt;<br/>
</p></div></div><div class="section" title="Discussion"><div class="titlepage"><h3 class="title" id="d55e527">Discussion</h3></div><p>Placing the metadata before the data that it is about will often simplify processing
			software. This is also often a natural way for people to think about the data, making
			documents easier to read and author.</p></div><div class="section" title="Related Patterns"><div class="titlepage"><h3 class="title" id="d55e532">Related Patterns</h3></div><p>The ordering of the head and body element in the Head-Body pattern is an application
			of this pattern.</p></div><div class="section" title="Known Uses"><div class="titlepage"><h3 class="title" id="d55e537">Known Uses</h3></div><p>In XHTML The head, which contains metadata, and body which contains the content are
			always in that order. The table elements contain size and spacing data in the attributes
			of the table element, which places it before the data, and the caption and column width
			and spacing data appears before the table data itself.</p></div></div><div class="section" title="Metadata in Separate Document"><div class="titlepage"><h2 class="title" id="d55e542">Metadata in Separate Document</h2><div><div class="abstract" title="Abstract"><p class="title"><strong>Abstract</strong></p><p>When there is a large amount of metadata for a document it can make sense to separate
				this into a different document altogether, with its own document type.</p></div></div></div><div class="section" title="Problem"><div class="titlepage"><h3 class="title" id="d55e549">Problem</h3></div><p>There may a large amount of metadata for a document. If much of this data is required,
			it could make the document difficult to author and read.</p></div><div class="section" title="Context"><div class="titlepage"><h3 class="title" id="d55e554">Context</h3></div><p>There is a large amount of metadata to be associated with the documents. If the
			metadata for several documents is the same.</p></div><div class="section" title="Forces"><div class="titlepage"><h3 class="title" id="d55e559">Forces</h3></div><p>Metadata can add complexity to a document, making it more difficult to author a
			document. When processing documents, the metadata may not be needed by some programs.
			Having the metadata in the document can increase processing time.</p></div><div class="section" title="Solution"><div class="titlepage"><h3 class="title" id="d55e564">Solution</h3></div><p>Place the metadata in the separate document. This document should have its own
			document type. There is a link placed in the document that refers to the metadata
			document.</p><p>If the metadata for several documents is the same, this can be a very good pattern to
			use. If, for example, a document requires extensive biographical information about its
			authors, and several of the documents are by the same author, the single metadata
			document can be used to minimize replication and ease maintenance.</p><p>External parsed entities parsed entities can be used in a similar way, but the
			document type of the original document does not get simplified.</p></div><div class="section" title="Examples"><div class="titlepage"><h3 class="title" id="d55e573">Examples</h3></div><p>Here is an example that references author information from an external file.</p><div class="example"><a id="d55e578"/><p class="title"><strong>Example 2.1. File: author-info.xml</strong></p><div class="example-contents"><div class="literallayout"><p>&lt;Author&gt;<br/>
&lt;Name&gt;Robert Smith&lt;/Name&gt;<br/>
&lt;BirthDate&gt;21-04-1960&lt;/BirthDate&gt;<br/>
&lt;Address&gt;123 Maple Street&lt;/Address&gt;<br/>
&lt;/Author&gt;<br/>
</p></div></div></div><br class="example-break"/><div class="example"><a id="d55e583"/><p class="title"><strong>Example 2.2. File: document.xml</strong></p><div class="example-contents"><div class="literallayout"><p><br/>
&lt;!DOCTYPE DOCUMENT[<br/>
&lt;!ENTITY author-info SYSTEM "author-info.xml"&gt;<br/>
]&gt;<br/>
&lt;Document&gt;<br/>
&lt;Head&gt;<br/>
&amp;author-info;<br/>
&lt;/Head&gt;<br/>
&lt;Body&gt;<br/>
This is the document.<br/>
&lt;/Body&gt;<br/>
&lt;/Document&gt;<br/>
</p></div></div></div><br class="example-break"/></div><div class="section" title="Discussion"><div class="titlepage"><h3 class="title" id="d55e588">Discussion</h3></div><p>This pattern makes the separation between the data and the metadata very clear, very
			little confusion can be made between the data and metadata.</p><p>The metadata and data can be defined at different times in the development cycle,
			allowing for iterative development, or for different authors to work on the data and
			metadata at the same time.</p><p>By having the metadata in a separate document, many documents can include the metadata
			from the same source. In the Example above, if the address of the author had changed,
			all of the documents which included this document would be automatically changed as
			well.</p></div><div class="section" title="Related Patterns"><div class="titlepage"><h3 class="title" id="d55e597">Related Patterns</h3></div><p>This is a specialization of both the the Separate Metadata and Data and
			patterns.</p></div><div class="section" title="Known Uses"><div class="titlepage"><h3 class="title" id="d55e602">Known Uses</h3></div><p>…</p></div><div class="section" title="References"><div class="titlepage"><h3 class="title" id="d55e607">References</h3></div><p>See: The XML &amp; SGML Cookbook page 2-23.</p></div></div><div class="section" title="Separate Metadata and Data"><div class="titlepage"><h2 class="title" id="d55e612">Separate Metadata and Data</h2><div><div class="abstract" title="Abstract"><p class="title"><strong>Abstract</strong></p><p>When documents contain content and data about the content, the two types of data
				should be clearly separated.</p></div></div></div><div class="section" title="Problem"><div class="titlepage"><h3 class="title" id="d55e619">Problem</h3></div><p>A document contains two distinct types of data, the content of the document, and data
			about the content. The data about the content is referred to as metadata. Since a
			document contains these two different types of data, it is not always to distinguish
			between the two types of data. For example:</p><div class="literallayout"><p><br/>
&lt;ArticleSummaries&gt;<br/>
&lt;Author&gt;Phred Smith&lt;/Author&gt;<br/>
&lt;Name&gt;Patterns of Stereo Design&lt;/Name&gt;<br/>
&lt;Author&gt;J.R. Dolby&lt;/Author&gt;<br/>
&lt;Summary&gt;<br/>
Use of patterns to arrange stereo components.<br/>
&lt;/Summary&gt;<br/>
&lt;/ArticleSummary&gt;<br/>
</p></div><p>Here there are two instances of the Author element, and at first glance it might not
			be possible to tell what the first instance of Author represents. Is it the author of
			the article being summarized? Is it the author of the article itself? It can be
			difficult to distinguish metadata from data.</p></div><div class="section" title="Context"><div class="titlepage"><h3 class="title" id="d55e628">Context</h3></div><p>Data about the data needs to be included in a document. This could be things like the
			author's name, the creation date, security levels of the data, namespace
			information, schema information, or identification attributes for use with cross
			references.</p></div><div class="section" title="Forces"><div class="titlepage"><h3 class="title" id="d55e633">Forces</h3></div><p>A clear separation is needed between what is metadata and what is data that forms the
			body of the document. This affects ease of authoring and processing of the document
			because the context of the data is clear.</p></div><div class="section" title="Solution"><div class="titlepage"><h3 class="title" id="d55e638">Solution</h3></div><p>The context of the data and the metadata should be made clear. The metadata should
			usually appear before the data that it describes. This makes it clearer what the
			metadata is about, and allows processing software to know about the data before it
			actually gets the data. For example the size of a table might be considered metadata. If
			the processing software gets the size of the table before the actual data, it can layout
			the table and then insert t he data in the proper place as it encounters it.</p></div><div class="section" title="Examples"><div class="titlepage"><h3 class="title" id="d55e643">Examples</h3></div><p>See the Metadata in Separate Document, Head-Body patterns for examples.</p></div><div class="section" title="Discussion"><div class="titlepage"><h3 class="title" id="d55e648">Discussion</h3></div><p>The resulting context provides structures that clearly identify the metadata as
			metadata. Often this pattern introduces new constructs to the document, so the overall
			length of the document may be increased. Authors and processing software need to clearly
			distinguish between metadata and content. This is not always possible to tell from the
			element names or positions. It is better to provide a context that will disambiguate the
			types of data. Obviously the first step in using this pattern is to be able to identify
			the difference between metadata and data. This is not always an easy task.</p></div><div class="section" title="Related Patterns"><div class="titlepage"><h3 class="title" id="d55e653">Related Patterns</h3></div><p>Metadata in Separate Document, Head-Body are specializations of this pattern.</p></div><div class="section" title="Known Uses"><div class="titlepage"><h3 class="title" id="d55e658">Known Uses</h3></div><p>The W3C Namespace Recommendation includes namespace information in attributes that
			make it clearer that this is data about the documents, and not really part of the
			document itself.</p><p>The XHTML DTD uses Head and Body elements to distinguish the metadata from the
			data.</p></div></div></div><div class="chapter" title="Chapter 3. Abstraction" id="d55e665"><div class="titlepage"><h2 class="title">Chapter 3. Abstraction</h2><div><div class="abstract" title="Abstract"><p class="title"><strong>Abstract</strong></p><p>What abstractions to create in the document type.</p></div></div></div><dl class="toc"><dt>Table of Contents</dt><dd><ol class="chapter"><li class="section"><a href="#d55e672">Choice Reducing Container</a><ol><li class="section"><a href="#d55e679">Problem</a></li><li class="section"><a href="#d55e684">Context</a></li><li class="section"><a href="#d55e689">Forces</a></li><li class="section"><a href="#d55e694">Solution</a></li><li class="section"><a href="#d55e699">Examples</a></li><li class="section"><a href="#d55e716">Discussion</a></li><li class="section"><a href="#d55e723">Related Patterns</a></li><li class="section"><a href="#d55e730">Known Uses</a></li><li class="section"><a href="#d55e735">References</a></li></ol></li><li class="section"><a href="#d55e740">Collection Element</a><ol><li class="section"><a href="#d55e747">Problem</a></li><li class="section"><a href="#d55e752">Context</a></li><li class="section"><a href="#d55e757">Forces</a></li><li class="section"><a href="#d55e762">Solution</a></li><li class="section"><a href="#d55e767">Examples</a></li><li class="section"><a href="#d55e787">Discussion</a></li><li class="section"><a href="#d55e796">Related Patterns</a></li><li class="section"><a href="#d55e801">Known Uses</a></li></ol></li><li class="section"><a href="#d55e809">Container Element</a><ol><li class="section"><a href="#d55e816">Problem</a></li><li class="section"><a href="#d55e821">Context</a></li><li class="section"><a href="#d55e826">Forces</a></li><li class="section"><a href="#d55e831">Solution</a></li><li class="section"><a href="#d55e836">Examples</a></li><li class="section"><a href="#d55e847">Discussion</a></li><li class="section"><a href="#d55e854">Related Patterns</a></li><li class="section"><a href="#d55e863">Known Uses</a></li><li class="section"><a href="#d55e868">References</a></li></ol></li><li class="section"><a href="#d55e873">Domain Element</a><ol><li class="section"><a href="#d55e880">Problem</a></li><li class="section"><a href="#d55e885">Context</a></li><li class="section"><a href="#d55e890">Forces</a></li><li class="section"><a href="#d55e895">Solution</a></li><li class="section"><a href="#d55e900">Examples</a></li><li class="section"><a href="#d55e907">Discussion</a></li><li class="section"><a href="#d55e914">Related Patterns</a></li><li class="section"><a href="#d55e919">Known Uses</a></li></ol></li><li class="section"><a href="#d55e928">Optional Container Element</a><ol><li class="section"><a href="#d55e935">Problem</a></li><li class="section"><a href="#d55e940">Context</a></li><li class="section"><a href="#d55e945">Forces</a></li><li class="section"><a href="#d55e950">Solution</a></li><li class="section"><a href="#d55e955">Examples</a></li><li class="section"><a href="#d55e968">Discussion</a></li><li class="section"><a href="#d55e977">Related Patterns</a></li><li class="section"><a href="#d55e982">Known Uses</a></li><li class="section"><a href="#d55e991">Contributions</a></li></ol></li></ol></dd></dl><div class="section" title="Choice Reducing Container"><div class="titlepage"><h2 class="title" id="d55e672">Choice Reducing Container</h2><div><div class="abstract" title="Abstract"><p class="title"><strong>Abstract</strong></p><p>When creating large DTDs, authors are required to learn a large number of attributes
				and elements, and where they can be positioned in order to know how to use the DTD. By
				reducing the number of choices that the author has to make at any point in the DTD by
				group related elements beneath newly introduced elements, the learning requirements of
				the author can be reduced.</p></div></div></div><div class="section" title="Problem"><div class="titlepage"><h3 class="title" id="d55e679">Problem</h3></div><p>In a complex DTD with many elements and attributes, a user of a document can be
			overwhelmed with the number of choices that have to be made. With many options users
			have a difficult time knowing all of the elements available and the order that these
			appear in.</p></div><div class="section" title="Context"><div class="titlepage"><h3 class="title" id="d55e684">Context</h3></div><p>In large, general-purpose DTDs where many logical units are presented, and the
			documents are expected to be authored by humans.</p></div><div class="section" title="Forces"><div class="titlepage"><h3 class="title" id="d55e689">Forces</h3></div><p>When the underlying order of the data to be represented, or to make DTDs applicable in
			many situations, large numbers of logical units need to appear in the DTD. However,
			presenting large numbers of attributes and elements makes the DTD more difficult to
			learn by authors of documents.</p></div><div class="section" title="Solution"><div class="titlepage"><h3 class="title" id="d55e694">Solution</h3></div><p>Present only a limited number of choices to the author at any point within the
			document. If the author has the choice of insert 100 different elements at some point in
			the document, it can be difficult to know how to proceed. By grouping elements into
			related sets, the number choices to be made at any one point can be reduced. The author
			has to choose between only a few higher level groups instead of many more detailed
			elements.</p></div><div class="section" title="Examples"><div class="titlepage"><h3 class="title" id="d55e699">Examples</h3></div><div class="example"><a id="d55e702"/><p class="title"><strong>Example 3.1. Example</strong></p><div class="example-contents"><p>Here is a DTD that presents several choices to the author:</p><div class="literallayout"><p><br/>
&lt;!ELEMENT Doc<br/>
( Para<br/>
| OrderedList<br/>
| UnorderedList<br/>
| Figure<br/>
| Artwork )+&gt;</p></div></div></div><br class="example-break"/><div class="example"><a id="d55e709"/><p class="title"><strong>Example 3.2. Example</strong></p><div class="example-contents"><p>The author here is present with a choice of 5 different elements to choose from
				after creating the Doc element. This choice could be limited by introducing new
				elements and grouping some of the existing elements together as children of the new
				elements like this:</p><div class="literallayout"><p><br/>
&lt;!ELEMENT Doc (Para | List | Illustration )+)&gt;<br/>
&lt;!ELEMENT List (OrderedList | UnorderedList )&gt;<br/>
&lt;!ELEMENT Illustration (Figure | Artwork )&gt;<br/>
                </p></div></div></div><br class="example-break"/></div><div class="section" title="Discussion"><div class="titlepage"><h3 class="title" id="d55e716">Discussion</h3></div><p>Once the Choice Reducing Pattern is applied, the learning requirements placed on the
			author of documents is reduced. Application of this pattern can however lead to an
			increase in the overall number of element types in the DTD. The number of elements in
			the above example went from 6 to 8 when the Group Choice pattern was applied. This can
			make the overall complexity of the DTD higher. It can also increase the size of
			documents.</p><p>The Choice Reducing Pattern hides choices from the authors of documents by introducing
			new elements that hide the details of a piece of the document that the author might not
			care about at that point in time. By introducing a single higher level element, the
			number of choices the author needs to make is lower, thereby reducing the learning
			requirements of the author.</p></div><div class="section" title="Related Patterns"><div class="titlepage"><h3 class="title" id="d55e723">Related Patterns</h3></div><p>This Choice Reducing Container is similar to the Optional Container Element in that
			they both try to make the DTD easier to use by the author by introducing new element
			types. Existing elements are grouped together as children of the new element. One
			difference between the two is the context they are used in. The Choice Reducing
			Container relates elements that are all choices in a content group while the Optional
			Container Element relates optional elements from the content group.</p><p>The motivation for the two is also different. In the Choice Reducing Container, the
			amount of information at any one point is reduced, but it is not intended to reduce the
			overall complexity of the document for a single author. The Optional Container Element
			hides parts of the structure permanently from the view of individual authors. It is
			likely that some authors will never use certain parts of large DTDs.</p></div><div class="section" title="Known Uses"><div class="titlepage"><h3 class="title" id="d55e730">Known Uses</h3></div><p>…</p></div><div class="section" title="References"><div class="titlepage"><h3 class="title" id="d55e735">References</h3></div><p>See Structuring XML Documents, Section 4.2.1 - Limiting Choices.</p></div></div><div class="section" title="Collection Element"><div class="titlepage"><h2 class="title" id="d55e740">Collection Element</h2><div><div class="abstract" title="Abstract"><p class="title"><strong>Abstract</strong></p><p>Create a new element whose content model allows only instances of a single element
				type.</p></div></div></div><div class="section" title="Problem"><div class="titlepage"><h3 class="title" id="d55e747">Problem</h3></div><p>There is an element that needs to be repeated several times at the same level of a
			documents.</p></div><div class="section" title="Context"><div class="titlepage"><h3 class="title" id="d55e752">Context</h3></div><p>Multiple elements of the same element type need to appear in the document as siblings
			of each other. Often metadata about the container needs to be expressed as well. The
			Collection Element is a logical place to put this metadata. Sometimes, the elements need
			to be grouped into different categories. Multiple Collection Elements can appear in the
			document, with each container having elements from one of the sub categories.</p></div><div class="section" title="Forces"><div class="titlepage"><h3 class="title" id="d55e757">Forces</h3></div><p>Groups of identical repeated elements often need some context established so that
			metadata can be associated with the entire group, or to distinguish between different
			groups of similar elements.</p></div><div class="section" title="Solution"><div class="titlepage"><h3 class="title" id="d55e762">Solution</h3></div><p>Create a new element type that contains the multiple elements of the same type. The
			Collection Element is often named by putting a descriptive ending on the contained
			element name. For example, a Collection Element of authors might be called AuthorList or
			AuthorGroup. Another way of naming the Collection Element is to pluralize the contained
			element name. For example, a collection of Stock elements would be named Stocks.</p></div><div class="section" title="Examples"><div class="titlepage"><h3 class="title" id="d55e767">Examples</h3></div><div class="example"><a id="d55e770"/><p class="title"><strong>Example 3.3. Simple Collection Element</strong></p><div class="example-contents"><div class="literallayout"><p><br/>
                    &lt;Portfolio&gt;<br/>
                    &lt;StockList&gt;<br/>
                    &lt;Stock&gt;<br/>
                    &lt;Name&gt;IBM&lt;/Name&gt;<br/>
                    &lt;Price&gt;110.25&lt;/Price&gt;<br/>
                    &lt;/Stock&gt;<br/>
                    &lt;Stock&gt;<br/>
                    &lt;Name&gt;MSFT&lt;/Name&gt;<br/>
                    &lt;Price&gt;89.50&lt;/Price&gt;<br/>
                    &lt;/Stock&gt;<br/>
                    &lt;/StockList&gt;<br/>
                    &lt;Bonds&gt;<br/>
                    ...<br/>
                    &lt;/Bonds&gt;<br/>
                    &lt;/Portfolio&gt;<br/>
                </p></div></div></div><br class="example-break"/><div class="example"><a id="d55e775"/><p class="title"><strong>Example 3.4. Container Element With Metadata</strong></p><div class="example-contents"><div class="literallayout"><p><br/>
                    &lt;KitchenInventory&gt;<br/>
                    &lt;GlassList location="cupboard3"&gt;<br/>
                    &lt;Glass type="shot" number="5"/&gt;<br/>
                    &lt;Glass type="highball" number="8"/&gt;<br/>
                    &lt;/GlassList&gt;<br/>
                    &lt;MugList&gt;<br/>
                    ...<br/>
                    &lt;/MugList&gt;<br/>
                    &lt;/KitchenInventory&gt;<br/>
                </p></div></div></div><br class="example-break"/><div class="example"><a id="d55e780"/><p class="title"><strong>Example 3.5. Multiple Categories of Same Collection</strong></p><div class="example-contents"><div class="literallayout"><p><br/>
                    &lt;Portfolio&gt;<br/>
                    &lt;StockList Exchange="NYSE"&gt;<br/>
                    &lt;Stock&gt;<br/>
                    &lt;Name&gt;IBM&lt;/Name&gt;<br/>
                    &lt;Price&gt;110.25&lt;/Price&gt;<br/>
                    &lt;/Stock&gt;<br/>
                    &lt;/StockList&gt;<br/>
                    &lt;StockList Exchange="NASDAQ"&gt;<br/>
                    &lt;Stock&gt;<br/>
                    &lt;Name&gt;MSFT&lt;/Name&gt;<br/>
                    &lt;Price&gt;89.50&lt;/Price&gt;<br/>
                    &lt;/Stock&gt;<br/>
                    &lt;Stock&gt;<br/>
                    &lt;Name&gt;AMZN&lt;/Name&gt;<br/>
                    &lt;Price&gt;80.75&lt;/Price&gt;<br/>
                    &lt;/Stock&gt;<br/>
                    &lt;/StockList&gt;<br/>
                    &lt;/Portfolio&gt;<br/>
                </p></div></div></div><br class="example-break"/><p>In this example the Collection Element was needed to establish a context for the
			exchange data. Without a collection element, this information would have to be
			duplicated in every Stock element.</p></div><div class="section" title="Discussion"><div class="titlepage"><h3 class="title" id="d55e787">Discussion</h3></div><p>The resulting structure is often easier to read and process. It does however result in
			documents that take up more space.</p><p>Providing a parent element for a list of elements of the same type allows for the
			collection to have a context, making it easier to add metadata if needed. This may also
			make processing and reading the document easier.</p><p>If there is a significant metadata for the container, in terms of amount of structure
			or volume, a Head-Body would be appropriate to include inside of the Collection
			Element.</p></div><div class="section" title="Related Patterns"><div class="titlepage"><h3 class="title" id="d55e796">Related Patterns</h3></div><p>This is a specialization of the Container Element pattern.</p></div><div class="section" title="Known Uses"><div class="titlepage"><h3 class="title" id="d55e801">Known Uses</h3></div><p>The DocBook DTD has a <code class="sgmltag-element">OrderedList</code> Element, whose only sub-children can be
			one or more ListItem elements.</p></div></div><div class="section" title="Container Element"><div class="titlepage"><h2 class="title" id="d55e809">Container Element</h2><div><div class="abstract" title="Abstract"><p class="title"><strong>Abstract</strong></p><p>A container has multiple elements as child elements. A new element type is created to
				group related elements. This is a very general pattern and many other patterns
				specialize this one.</p></div></div></div><div class="section" title="Problem"><div class="titlepage"><h3 class="title" id="d55e816">Problem</h3></div><p>There are multiple elements that occur at the same level within a document. These
			elements can be separated into distinct groups.</p></div><div class="section" title="Context"><div class="titlepage"><h3 class="title" id="d55e821">Context</h3></div><p>There are multiple elements that can occur as child elements of a single, higher level
			element, and some of these elements are related.</p></div><div class="section" title="Forces"><div class="titlepage"><h3 class="title" id="d55e826">Forces</h3></div><p>Documents need structure, and this is the easiest way to add structure to a
			document.</p></div><div class="section" title="Solution"><div class="titlepage"><h3 class="title" id="d55e831">Solution</h3></div><p>Create a new element that contains some of the multiple child elements.</p></div><div class="section" title="Examples"><div class="titlepage"><h3 class="title" id="d55e836">Examples</h3></div><div class="literallayout"><p><br/>
&lt;ComputerConfiguration&gt;<br/>
&lt;RAM&gt;128 MB&lt;/RAM&gt;<br/>
&lt;WordProcessor&gt;WordPerfect&lt;/WordProcessor&gt;<br/>
&lt;HardDriveSize&gt;8GB&lt;/HardDriveSize&gt;<br/>
&lt;XMLParser&gt;Xerces&lt;/XMLParser&gt;<br/>
&lt;/ComputerConfiguration&gt;<br/>
</p></div><p>The above document describes a computer's configuration. If however processing
			software was only interested in the hardware aspects of the configuration it would need
			to check all of the elements and extract the RAM and HardDriveSize elements. Compare
			this to the following:</p><div class="literallayout"><p><br/>
&lt;ComputerConfiguration&gt;<br/>
&lt;Software&gt;<br/>
&lt;Wordprocessor&gt;Wordperfect&lt;/Wordprocessor&gt;<br/>
&lt;XMLParser&gt;Xerces&lt;/XMLParser&gt;<br/>
&lt;/Software&gt;<br/>
&lt;Hardware&gt;<br/>
&lt;RAM&gt;128 MB&lt;RAM&gt;<br/>
&lt;HardDriveSize&gt;8 GB&lt;/HardDriveSize&gt;<br/>
&lt;/Hardware&gt;<br/>
&lt;/ComputerConfiguration&gt;<br/>
</p></div><p>In this example the software and hardware aspects of the configuration are separated.
			Processing software that need to extract individual aspects can do so easily.</p></div><div class="section" title="Discussion"><div class="titlepage"><h3 class="title" id="d55e847">Discussion</h3></div><p>This pattern adds a level of abstraction to the structure of a document. This
			abstraction can be used to simply provide grouping of elements as in the Examples
			section. This grouping provides additional semantic information about the data.</p><p>This extra element can also be a useful place to provide metadata about the individual
			group of data.</p></div><div class="section" title="Related Patterns"><div class="titlepage"><h3 class="title" id="d55e854">Related Patterns</h3></div><p>The Marketplace pattern can be used if there is more than one category that can apply
			to each type.</p><p>The Head-Body pattern uses two specific types of Container Elements, one for metadata
			and one for content.</p><p>The Collection Element is a container for single type of element.</p></div><div class="section" title="Known Uses"><div class="titlepage"><h3 class="title" id="d55e863">Known Uses</h3></div><p>The Isogen whitepaper Object-Oriented SGML Deconstructing SGML for Storage Section
			contains an an excellent example of where a container was used to help in the storage
			and retrieval of data.</p></div><div class="section" title="References"><div class="titlepage"><h3 class="title" id="d55e868">References</h3></div><p>See Structuring XML Documents, Section 5.2.1: Containers.</p></div></div><div class="section" title="Domain Element"><div class="titlepage"><h2 class="title" id="d55e873">Domain Element</h2><div><div class="abstract" title="Abstract"><p class="title"><strong>Abstract</strong></p><p>A concept from domain analysis is made into an element.</p></div></div></div><div class="section" title="Problem"><div class="titlepage"><h3 class="title" id="d55e880">Problem</h3></div><p>A concept in the domain needs to be recognized as a distinct unit of information when
			processing it.</p></div><div class="section" title="Context"><div class="titlepage"><h3 class="title" id="d55e885">Context</h3></div><p>Every document has a domain, and every domain has unique concepts.</p></div><div class="section" title="Forces"><div class="titlepage"><h3 class="title" id="d55e890">Forces</h3></div><p>Data needs to be structured in order to be processed.</p></div><div class="section" title="Solution"><div class="titlepage"><h3 class="title" id="d55e895">Solution</h3></div><p>Concepts from the domain become elements in the document.</p></div><div class="section" title="Examples"><div class="titlepage"><h3 class="title" id="d55e900">Examples</h3></div><p>In a payroll processing system, Employees, Hourly Wage, and Hours Worked are all
			concepts from the domain. These can all be made into elements in a document type used
			for dealing with the payroll.</p><div class="literallayout"><p><br/>
&lt;Employee id="62537"&gt;<br/>
&lt;HourlyWage&gt;25.00&lt;/HourlyWage&gt;<br/>
&lt;HoursWorked&gt;40&lt;/HoursWorked&gt;<br/>
&lt;/Employee&gt;<br/>
</p></div></div><div class="section" title="Discussion"><div class="titlepage"><h3 class="title" id="d55e907">Discussion</h3></div><p>Object Oriented Analysis and Entity-Relational DataBase modeling techniques are useful
			for finding domain concepts.</p><p>Granularity of object needs to be thought about. Too granular results in more markup
			and more processing, if elements are not granular enough, extra parsing needs to be done
			by the application.</p></div><div class="section" title="Related Patterns"><div class="titlepage"><h3 class="title" id="d55e914">Related Patterns</h3></div><p>…</p></div><div class="section" title="Known Uses"><div class="titlepage"><h3 class="title" id="d55e919">Known Uses</h3></div><p>All document types are full of Domain Elements.</p><p>XHTML is used for markup of documents to be displayed so it contains elements for
			things such as titles, headings, and paragraphs.</p><p>The Information and Content Exchange (ICE) Protocol is used for distributing web
			content, so it contains elements such as sender, receiver, request and response.</p></div></div><div class="section" title="Optional Container Element"><div class="titlepage"><h2 class="title" id="d55e928">Optional Container Element</h2><div><div class="abstract" title="Abstract"><p class="title"><strong>Abstract</strong></p><p>When creating large DTDs with many logical units authors might be required to learn a
				large number of these logical units to know how to use the DTD. By hiding the details of
				optional parts of the DTD beneath optional elements, some of this complexity can be
				reduced.</p></div></div></div><div class="section" title="Problem"><div class="titlepage"><h3 class="title" id="d55e935">Problem</h3></div><p>In a DTD with many logical units, an author of a document can be overwhelmed with the
			number of choices that have to be made.</p></div><div class="section" title="Context"><div class="titlepage"><h3 class="title" id="d55e940">Context</h3></div><p>In large, general-purpose DTDs where many logical units are presented, and more than
			one of the units is optional. The document will be authored by humans.</p></div><div class="section" title="Forces"><div class="titlepage"><h3 class="title" id="d55e945">Forces</h3></div><p>In order to make DTDs applicable in many situations, large numbers of logical units
			need to appear in the DTD. However, presenting large numbers of logical units makes the
			DTD more difficult to learn by authors of documents.</p></div><div class="section" title="Solution"><div class="titlepage"><h3 class="title" id="d55e950">Solution</h3></div><p>Hide related parts of a document that may never be needed by an author of a document
			beneath an element type. Any details of the structure of a document that are optional in
			a document can be grouped together as attributes and children elements of a single
			element. If an author never uses this branch of the document, none of the logical units
			within that branch need to be known to the other.</p></div><div class="section" title="Examples"><div class="titlepage"><h3 class="title" id="d55e955">Examples</h3></div><p>Lets create a DTD that allows an author to create notes that can be a note to oneself,
			or an email. The DTD might look like this:</p><div class="literallayout"><p><br/>
&lt;!ELEMENT Note (NoteToSelf | Email )&gt;<br/>
&lt;!ELEMENT NoteToSelf (Body)&gt;<br/>
&lt;!ELEMENT Body (#PCDATA)&gt;<br/>
&lt;!ELEMENT Email (Recipient+, CC*, BCC*, Body)&gt;<br/>
&lt;!ELEMENT Recipient (#PCDATA)&gt;<br/>
&lt;!ELEMENT CC (#PCDATA)&gt;<br/>
&lt;!ELEMENT BCC (#PCDATA)&gt;<br/>
</p></div><p>If the author of these documents only had to be create notes to himself, he would
			never need to be aware of the elements that are required in the Email branch of the DTD.
			He would create his document like this:</p><div class="literallayout"><p><br/>
&lt;Note&gt;<br/>
&lt;NoteToSelf&gt;<br/>
&lt;Body&gt;This is my note&lt;/Body&gt;<br/>
&lt;/NoteToSelf&gt;<br/>
&lt;Note&gt;<br/>
</p></div><p>Although the DTD contains 7 elements, the author would only have to use three
			elements: Note, NoteToSelf and Email. The author would never be required to use the
			Email element and would not even have to be aware of the existence of the remaining
			three elements.</p></div><div class="section" title="Discussion"><div class="titlepage"><h3 class="title" id="d55e968">Discussion</h3></div><p>Once the Optional Group Pattern is applied, the learning requirements placed on the
			author of documents is reduced. Application of this pattern can however lead to an
			increase in the overall number of logical units in the DTD. The above note DTD could
			have been written as follows:</p><div class="literallayout"><p><br/>
&lt;!ELEMENT Note (Recipient?, CC?, BCC?, Body)&gt;<br/>
&lt;!ELEMENT Body (#PCDATA)&gt;<br/>
&lt;!ELEMENT Recipient (#PCDATA)&gt;<br/>
&lt;!ELEMENT CC (#PCDATA)&gt;<br/>
&lt;!ELEMENT BCC (#PCDATA)&gt;<br/>
</p></div><p>This actually reduces the number of logical units in the DTD from 7 to 5, but makes
			things more complicated for users who just want to write notes to themselves, because
			they now have to be aware of the Recipient, CC, and BCC elements. The Optional Group
			hides complexity from the authors of documents by introducing optional elements that
			hide the details of a piece of the document that the author might not care about. By
			introducing a single higher level element, the details of many logical units may be
			hidden from the author, thereby reducing the learning requirements of the author.</p></div><div class="section" title="Related Patterns"><div class="titlepage"><h3 class="title" id="d55e977">Related Patterns</h3></div><p>This Optional Group is similar to the Choice Reducing Container in that they both hide
			logical units of a document from the author by introducing new element types. Existing
			elements are group together beneath the new element. The major difference between the
			two is the context they are used in. The Choice Group relates elements that are all
			choices in a content group while the Optional Group relates optional elements from the
			content group.</p></div><div class="section" title="Known Uses"><div class="titlepage"><h3 class="title" id="d55e982">Known Uses</h3></div><p>This DTD fragment was taken from XBEL:</p><div class="literallayout"><p><br/>
&lt;!ELEMENT xbel (title?, info?, desc?, (%nodes.mix;)*)&gt;<br/>
&lt;!ELEMENT info (metadata+)&gt;<br/>
&lt;!ELEMENT metadata EMPTY&gt;<br/>
&lt;!ATTLIST metadata owner CDATA #REQUIRED&gt;<br/>
<br/>
</p></div><p>When generating an XBEL document, the info element is not required. This means that if
			the author was never interested in creating an info element, he would not need to know
			about the info element, the metadata element, or the owner attribute, thus eliminating 3
			logical units from what the author needs to learn.</p></div><div class="section" title="Contributions"><div class="titlepage"><h3 class="title" id="d55e991">Contributions</h3></div><p>Thanks to Pankaj Kamthan from Concordia University for fixing up a bit of XML in the
			pattern.</p></div></div></div><div class="chapter" title="Chapter 4. Organization" id="d55e996"><div class="titlepage"><h2 class="title">Chapter 4. Organization</h2><div><div class="abstract" title="Abstract"><p class="title"><strong>Abstract</strong></p><p>How to organize the structure of documents.</p></div></div></div><dl class="toc"><dt>Table of Contents</dt><dd><ol class="chapter"><li class="section"><a href="#d55e1003">Declare Before First Use</a><ol><li class="section"><a href="#d55e1010">Problem</a></li><li class="section"><a href="#d55e1015">Context</a></li><li class="section"><a href="#d55e1020">Forces</a></li><li class="section"><a href="#d55e1025">Solution</a></li><li class="section"><a href="#d55e1030">Examples</a></li><li class="section"><a href="#d55e1035">Discussion</a></li><li class="section"><a href="#d55e1040">Related Patterns</a></li><li class="section"><a href="#d55e1045">Known Uses</a></li></ol></li><li class="section"><a href="#d55e1050">Envelope</a><ol><li class="section"><a href="#d55e1059">Problem</a></li><li class="section"><a href="#d55e1064">Context</a></li><li class="section"><a href="#d55e1069">Forces</a></li><li class="section"><a href="#d55e1076">Solution</a></li><li class="section"><a href="#d55e1081">Examples</a></li><li class="section"><a href="#d55e1088">Discussion</a></li><li class="section"><a href="#d55e1093">Related Patterns</a></li><li class="section"><a href="#d55e1098">Known Uses</a></li><li class="section"><a href="#d55e1103">References</a></li></ol></li><li class="section"><a href="#d55e1108">Flyweight</a><ol><li class="section"><a href="#d55e1115">Problem</a></li><li class="section"><a href="#d55e1130">Context</a></li><li class="section"><a href="#d55e1135">Forces</a></li><li class="section"><a href="#d55e1140">Solution</a></li><li class="section"><a href="#d55e1157">Examples</a></li><li class="section"><a href="#d55e1181">Discussion</a></li><li class="section"><a href="#d55e1190">Related Patterns</a></li><li class="section"><a href="#d55e1195">Known Uses</a></li></ol></li><li class="section"><a href="#d55e1202">Marketplace</a><ol><li class="section"><a href="#d55e1209">Problem</a></li><li class="section"><a href="#d55e1218">Context</a></li><li class="section"><a href="#d55e1223">Forces</a></li><li class="section"><a href="#d55e1228">Solution</a></li><li class="section"><a href="#d55e1233">Examples</a></li><li class="section"><a href="#d55e1242">Discussion</a></li><li class="section"><a href="#d55e1247">Related Patterns</a></li><li class="section"><a href="#d55e1252">Known Uses</a></li><li class="section"><a href="#d55e1257">References</a></li></ol></li><li class="section"><a href="#d55e1262">Referenced Note</a><ol><li class="section"><a href="#d55e1271">Problem</a></li><li class="section"><a href="#d55e1276">Context</a></li><li class="section"><a href="#d55e1281">Forces</a></li><li class="section"><a href="#d55e1286">Solution</a></li><li class="section"><a href="#d55e1302">Examples</a></li><li class="section"><a href="#d55e1311">Discussion</a></li><li class="section"><a href="#d55e1318">Related Patterns</a></li><li class="section"><a href="#d55e1325">Known Uses</a></li><li class="section"><a href="#d55e1330">References</a></li></ol></li></ol></dd></dl><div class="section" title="Declare Before First Use"><div class="titlepage"><h2 class="title" id="d55e1003">Declare Before First Use</h2><div><div class="abstract" title="Abstract"><p class="title"><strong>Abstract</strong></p><p>Elements which are referenced by another part of a document should be found earlier in
				the document than the first place they are referenced.</p></div></div></div><div class="section" title="Problem"><div class="titlepage"><h3 class="title" id="d55e1010">Problem</h3></div><p>Often an element will refer to another one; this is what the ID and IDREF attributes
			in XML are used for. A common example is a footnote element. When processing software
			encounters an reference to an element that has not yet been processed, it often has to
			do more processing.</p></div><div class="section" title="Context"><div class="titlepage"><h3 class="title" id="d55e1015">Context</h3></div><p>This pattern applies to a wide variety of document types. It is common to have
			elements reference one another.</p></div><div class="section" title="Forces"><div class="titlepage"><h3 class="title" id="d55e1020">Forces</h3></div><p>Ease of processing is effected by element order. Having elements in the correct order
			can make processing easier.</p></div><div class="section" title="Solution"><div class="titlepage"><h3 class="title" id="d55e1025">Solution</h3></div><p>Ensure that the elements are ordered so that elements are encountered before they are
			referred to. This gives the processing software a better chance of doing a single pass
			traversal of the document.</p></div><div class="section" title="Examples"><div class="titlepage"><h3 class="title" id="d55e1030">Examples</h3></div><div class="literallayout"><p><br/>
&lt;!DOCTYPE Doc [<br/>
<br/>
&lt;!ELEMENT Person (Adress*, BillToAddress, ShipToAddress)&gt;<br/>
<br/>
&lt;!ELEMENT Address (#PCDATA)&gt;<br/>
&lt;!ATTLIST Address id IDREF #REQUIRED &gt;<br/>
<br/>
&lt;!ELEMENT BillToAddress EMPTY&gt;<br/>
&lt;!ATTLIST BillToAddress address IDREF #REQUIRED&gt;<br/>
<br/>
&lt;!ELEMENT ShipToAddress EMPTY&gt;<br/>
&lt;!ATTLIST ShipToAddress address IDREF #REQUIRED&gt;<br/>
<br/>
]&gt;<br/>
<br/>
&lt;Doc&gt;<br/>
&lt;Person&gt;<br/>
&lt;Address id="1"&gt;<br/>
123 Main St, New York NY<br/>
&lt;/Address&gt;<br/>
&lt;Address id="2"&gt;<br/>
2001 5th Ave, New York NY<br/>
&lt;/Address&gt;<br/>
&lt;BillToAddress address="1"/&gt;<br/>
&lt;ShipToAddress address="2"/&gt;<br/>
&lt;/Person&gt;<br/>
&lt;/Doc&gt;<br/>
</p></div></div><div class="section" title="Discussion"><div class="titlepage"><h3 class="title" id="d55e1035">Discussion</h3></div><p>Stream based processors are popular, particularly when documents are very large, and
			may take up large amounts of memory, or when speed of processing is essential. It is
			often difficult to use stream based processing if elements that are needed to process a
			section of the document do not appear until after the place they are needed. This
			requires a forward-looking mechanism that goes against the principle of stream based
			processing.</p></div><div class="section" title="Related Patterns"><div class="titlepage"><h3 class="title" id="d55e1040">Related Patterns</h3></div><p>Consider this pattern when applying the Referenced Note. The Metadata First is very
			similar to this patterns, except it deals with metadata instead of general elements as
			this pattern does.</p></div><div class="section" title="Known Uses"><div class="titlepage"><h3 class="title" id="d55e1045">Known Uses</h3></div><p>…</p></div></div><div class="section" title="Envelope"><div class="titlepage"><h2 class="title" id="d55e1050">Envelope</h2><div><div class="abstract" title="Abstract"><p class="title"><strong>Abstract</strong></p><p>Provide a document type which is defined to be a holder for other, arbitrary XML
				data.</p></div></div></div><div class="section" title="Problem"><div class="titlepage"><h3 class="title" id="d55e1059">Problem</h3></div><p>Different sets of data need to be delivered to a system in a consistent way.</p></div><div class="section" title="Context"><div class="titlepage"><h3 class="title" id="d55e1064">Context</h3></div><p>This pattern applies when different sets of data need to be used in some system. The
			structure of the data itself varies, or is not known at the time the system is being
			built.</p></div><div class="section" title="Forces"><div class="titlepage"><h3 class="title" id="d55e1069">Forces</h3></div><p>This pattern allows for Flexibility by allowing elements from other documents to be
			embedded into a consistent holder.</p><p>This pattern allows for a separation of concerns between different document types.
			Mixing issues such as transport with document data is usually not a good idea.</p></div><div class="section" title="Solution"><div class="titlepage"><h3 class="title" id="d55e1076">Solution</h3></div><p>Create a document type which will act as a holder for the varying set of data.</p></div><div class="section" title="Examples"><div class="titlepage"><h3 class="title" id="d55e1081">Examples</h3></div><p>This example shows a very simple envelope which consists of sender and a receiver
			children elements. Note the use of two different namespaces to allow an XML parser to
			read the document, which contains elements from both the Envelope (envelope.dtd) and the
			embedded data (my-stuff.dtd)</p><div class="literallayout"><p><br/>
&lt;e:Envelope xmlsns:e="http://xmlpatterns.com/envelope.dtd"&gt;<br/>
&lt;e:sender name="bob"/&gt;<br/>
&lt;e:receiver name="http://xmlpatterns.com/message-receiver.cgi"/&gt;<br/>
&lt;myStuff:message xmlsns:e="http://xmlpatterns.com/my-stuff.dtd"&gt;<br/>
This is my message<br/>
&lt;/myStuff:message&gt;<br/>
&lt;/e:Envelope&gt;<br/>
</p></div></div><div class="section" title="Discussion"><div class="titlepage"><h3 class="title" id="d55e1088">Discussion</h3></div><p>The Envelope is used as a delivery mechanism for XML data. Document types created for
			holding domain data should not be responsible, for defining transport ways to do deal
			with things such as transport, security, delivery and packaging. The envelope provide
			for a clear separation between these things and the data itself.</p></div><div class="section" title="Related Patterns"><div class="titlepage"><h3 class="title" id="d55e1093">Related Patterns</h3></div><p>This is similar to the Catch-All Element, except that the the document type of the
			Envelope pattern exists solely as an holder for other data and, the Catch-All Element is
			for embedding new elements within exsisting data.</p></div><div class="section" title="Known Uses"><div class="titlepage"><h3 class="title" id="d55e1098">Known Uses</h3></div><p>SOAP (Simple Object Access Protocol) is an Envelope for doing remote transport of
			messages.</p></div><div class="section" title="References"><div class="titlepage"><h3 class="title" id="d55e1103">References</h3></div><p>…</p></div></div><div class="section" title="Flyweight"><div class="titlepage"><h2 class="title" id="d55e1108">Flyweight</h2><div><div class="abstract" title="Abstract"><p class="title"><strong>Abstract</strong></p><p>If the same information is included at many different points in a document the
				information can be placed in just one place, and shared from each place in the document
				that needs to refer to it.</p></div></div></div><div class="section" title="Problem"><div class="titlepage"><h3 class="title" id="d55e1115">Problem</h3></div><p>Placing the same information in many different place can cause several
			problems:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><p>Mistakes can be made in copying the information</p></li><li class="listitem"><p>If the data changes, all occurrences of the information must be located and
					changed. This makes maintenance of the document difficult.</p></li><li class="listitem"><p>Documents can become quite large if the same information is repeated over and
					over again.</p></li></ul></div></div><div class="section" title="Context"><div class="titlepage"><h3 class="title" id="d55e1130">Context</h3></div><p>This is a very general pattern, almost any document type can make use of it. This
			pattern can be used anywhere where the same information must be repeated more than once
			in a document. The repeated data can occur in the document declaration, or in the
			document instance itself.</p></div><div class="section" title="Forces"><div class="titlepage"><h3 class="title" id="d55e1135">Forces</h3></div><p>This pattern can effect the length of the document, maintainability, and readability
			of the document.</p></div><div class="section" title="Solution"><div class="titlepage"><h3 class="title" id="d55e1140">Solution</h3></div><p>Place the shared information in just one place, and make references to it from every
			place in the document that needs to include this information. There are several ways to
			do this:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><p>Use XML Entity Declarations. These provide a way to do text substitutions
					inside of a document. The XML Specification Section 4.2 Entity
					Declarations</p></li><li class="listitem"><p>Use the XLink attribute xlink:show="embed". This technique has the
					advantage of using a standard, so some tools may be available to do the
					processing. This is defined in The W3C's XML Linking Language
					Specification</p></li><li class="listitem"><p>Use ID and IDREF attributes. A reference can be made to an entity via an IDREF
					attribute. Applications processing this will need to do the processing to do
					this type of Flyweight.</p></li></ul></div><p>See the Examples section for an example of each of the above techniques.</p></div><div class="section" title="Examples"><div class="titlepage"><h3 class="title" id="d55e1157">Examples</h3></div><div class="example"><a id="d55e1160"/><p class="title"><strong>Example 4.1. XML Entities</strong></p><div class="example-contents"><p>This example shows how XML Entities can be used to put a piece of information in
				just one place, and then have it appear in multiple places in the document.</p><div class="literallayout"><p><br/>
&lt;!DOCTYPE Doc[<br/>
&lt;!ENTITY TITLE "My Document"&gt;<br/>
]&gt;<br/>
&lt;Document&gt;<br/>
&lt;title&gt;&amp;TITLE;&lt;/title&gt;<br/>
&lt;H1&gt;&amp;TITLE;&lt;/H1&gt;<br/>
This is my paragraph.<br/>
&lt;/Document&gt;<br/>
</p></div></div></div><br class="example-break"/><div class="example"><a id="d55e1167"/><p class="title"><strong>Example 4.2. XLink</strong></p><div class="example-contents"><p>This document shows the use of XLink attributes to include the contents of a
				document in two different places. Since XLink is a standard it is possible that
				existing tools could be used to do the substitution.</p><div class="literallayout"><p><br/>
&lt;Document&gt;<br/>
&lt;title&gt;<br/>
&lt;include xlink:show="embed"<br/>
xlink:href="titledoc.txt"/&gt;<br/>
&lt;/title&gt;<br/>
&lt;h1&gt;<br/>
&lt;include xlink:show="embed"<br/>
xlink:href="titledoc.txt"/&gt;<br/>
&lt;/h1&gt;<br/>
This is my paragraph.<br/>
&lt;/Document&gt;<br/>
</p></div></div></div><br class="example-break"/><div class="example"><a id="d55e1174"/><p class="title"><strong>Example 4.3. ID and IDREF</strong></p><div class="example-contents"><p>This shows how ID and IDREF attributes can be used as a Flyweight. Note thats this
				would require some extra work on the part of the processing software to do the
				substitution.</p><div class="literallayout"><p>                              <br/>
&lt;Document&gt;<br/>
&lt;text id="title"&gt;My Document&lt;/text&gt;<br/>
&lt;title IDREF="title"/&gt;<br/>
&lt;h1 IDREF="title"/&gt;<br/>
&lt;/Document&gt;<br/>
</p></div></div></div><br class="example-break"/></div><div class="section" title="Discussion"><div class="titlepage"><h3 class="title" id="d55e1181">Discussion</h3></div><p>This pattern can greatly enhance the maintainability of a document, if the same data
			is repeated several times, and that data changes, every occurrence of that data must be
			found and updated. This can be a tedious and error prone task. Having the data in only
			one place allows all occurrences of it to be changed at once.</p><p>The Flyweight pattern should not be used if the shared information can vary over time.
			This would increase the maintenance burden of the document.</p><p>Readability of the document can suffer if the Flyweight pattern is used, readers are
			forced to reference a different section of the document when looking at the
			contents.</p></div><div class="section" title="Related Patterns"><div class="titlepage"><h3 class="title" id="d55e1190">Related Patterns</h3></div><p>See Declare Before First Use for suggestions on where to place the shared
			information.</p></div><div class="section" title="Known Uses"><div class="titlepage"><h3 class="title" id="d55e1195">Known Uses</h3></div><p>XHTML uses a a common attributes parameter entity that is a Flyweight.</p><p>The XML &amp; SGML Cookbook page 1-126 mentions the Flyweight pattern.</p></div></div><div class="section" title="Marketplace"><div class="titlepage"><h2 class="title" id="d55e1202">Marketplace</h2><div><div class="abstract" title="Abstract"><p class="title"><strong>Abstract</strong></p><p>Instead of organizing objects in a hierarchical fashion, objects are organized in a
				linear way, with signs on each object to indicate its classifications.</p></div></div></div><div class="section" title="Problem"><div class="titlepage"><h3 class="title" id="d55e1209">Problem</h3></div><p>A natural way to use mark up to classify objects is to use a container for each new
			type in the classification.</p><div class="literallayout"><p><br/>
&lt;Employees&gt;<br/>
&lt;Managers&gt;<br/>
&lt;Person type="salaried"&gt;<br/>
Riff Raff<br/>
&lt;/Person&gt;<br/>
&lt;Person type="contractor"&gt;<br/>
Frank Furter<br/>
&lt;/Person&gt;<br/>
&lt;/Managers&gt;<br/>
&lt;Workers&gt;<br/>
&lt;Person type="salaried"&gt;<br/>
Brad Majors<br/>
&lt;/Person&gt;<br/>
&lt;Person type="contractor"&gt;<br/>
Janet Weiss<br/>
&lt;/Person&gt;<br/>
&lt;/Workers&gt;<br/>
&lt;/Employees&gt;<br/>
</p></div><p>This can lead to problems, if processing software needs to find all of the employees,
			or just the salaried employees, it needs to iterate through two different lists, the
			managers and the workers.</p></div><div class="section" title="Context"><div class="titlepage"><h3 class="title" id="d55e1218">Context</h3></div><p>Any place where data can be organized by more than one type.</p></div><div class="section" title="Forces"><div class="titlepage"><h3 class="title" id="d55e1223">Forces</h3></div><p>Ease-of-processing can be greatly affected by the way that elements are organized.
			Ease-of-Authoring can also be a problem, pick one structural organization can lead to
			awkward groupings of elements, and the choice of structure may seem arbitrary.</p></div><div class="section" title="Solution"><div class="titlepage"><h3 class="title" id="d55e1228">Solution</h3></div><p>The objects to be modeled can all be grouped at the same level, and the categorization
			can be done with attributes on the element. This allows multiple characteristics of the
			objects to be modeled without enforcing a possibly artificial hiearchy on the
			objects.</p></div><div class="section" title="Examples"><div class="titlepage"><h3 class="title" id="d55e1233">Examples</h3></div><p>The following model can be contrasted to the sample in the problem section, which uses
			a tree structure to model employees. Each employee can have two different types, whether
			they are Salaried or Contractors and whether they are Workers or Managers. In the tree
			structure, one of the types, the Worker/Manager distinction is given more importance
			than the Salaried/Contractor. Extra effort would be required to extract just the
			Salaried employees.</p><p>The sample below uses the Marketplace pattern to organize the same data into a flatter
			structure. In this organization both types are given equal precedence, and both types
			are equally easy to process.</p><div class="literallayout"><p><br/>
&lt;Employees&gt;<br/>
&lt;Person type="salaried" level="manager"&gt;<br/>
Riff Raff<br/>
&lt;/Person&gt;<br/>
&lt;Person type="contractor" level="manager"&gt;<br/>
Frank Furter<br/>
&lt;/Person&gt;<br/>
&lt;Person type="salaried" level="worker"&gt;<br/>
Brad<br/>
&lt;/Person&gt;<br/>
&lt;Person type="contractor" level="worker"&gt;<br/>
Janet<br/>
&lt;/Person&gt;<br/>
&lt;/Employees&gt;<br/>
</p></div></div><div class="section" title="Discussion"><div class="titlepage"><h3 class="title" id="d55e1242">Discussion</h3></div><p>This pattern results in a organization that can make mapping to database tables
			easier. The elements in the marketplace are equivalent to rows in a table, while the
			attributes are the columns. A more hierarchical structure can be harder to map to
			databases.</p></div><div class="section" title="Related Patterns"><div class="titlepage"><h3 class="title" id="d55e1247">Related Patterns</h3></div><p>The Marketplace is often contained in a Collection Element.</p></div><div class="section" title="Known Uses"><div class="titlepage"><h3 class="title" id="d55e1252">Known Uses</h3></div><p>…</p></div><div class="section" title="References"><div class="titlepage"><h3 class="title" id="d55e1257">References</h3></div><p>See:The Microsoft whitepaper Serializing Graphs of Data in XML for a discussion of
			representing graph structure such as RDBMS tables in XML.</p></div></div><div class="section" title="Referenced Note"><div class="titlepage"><h2 class="title" id="d55e1262">Referenced Note</h2><div><div class="abstract" title="Abstract"><p class="title"><strong>Abstract</strong></p><p>When an area in text needs to refer to a note that will be placed in a different part
				of the document, a reference is made to a separate entity using an IDREF.</p></div></div></div><div class="section" title="Problem"><div class="titlepage"><h3 class="title" id="d55e1271">Problem</h3></div><p>Some text needs to make a reference to another piece of text that is located elsewhere
			with the original text. This could be a footnote, an annotation, or an endnote. The
			position of the note in the final document will not be known until the document is
			rendered.</p></div><div class="section" title="Context"><div class="titlepage"><h3 class="title" id="d55e1276">Context</h3></div><p>Notes occur when a comment needs to be made about a piece of text, but the author does
			not want the main text flow to be interrupted. This is a very publication oriented
			pattern, it is not as relevant in data interchange documents.</p></div><div class="section" title="Forces"><div class="titlepage"><h3 class="title" id="d55e1281">Forces</h3></div><p>Ease of Use and Ease of Processing is effected by how a note is organized.</p></div><div class="section" title="Solution"><div class="titlepage"><h3 class="title" id="d55e1286">Solution</h3></div><p>The note is put in a element which is not contained within the flow of the text where
			the note is referenced from. An attribute of type ID is put on the note element, and an
			element is inserted into the flow of the text with an IDREF that refers to the
			note's ID. A different solution would be to simply use an inline element to include
			the note as such:</p><div class="literallayout"><p><br/>
&lt;Paragraph&gt;This paragraph refers to a note.<br/>
&lt;Note&gt;This is the note.&lt;/Note&gt;<br/>
&lt;/Paragraph&gt;<br/>
</p></div><p>This solution has a couple of potential disadvantages:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><p>The note cannot be referred to from more than one place.</p></li><li class="listitem"><p>The note is not physically removed from the text in the marked up document. It
					may more difficult for the author of the document to realize how the note will
					be used in the published form of the document.</p></li></ul></div></div><div class="section" title="Examples"><div class="titlepage"><h3 class="title" id="d55e1302">Examples</h3></div><div class="literallayout"><p><br/>
&lt;Paragraph&gt;<br/>
This paragraph refers to a note.<br/>
&lt;NoteReference ref="1"/&gt;<br/>
&lt;/Paragraph&gt;<br/>
&lt;Note id="1"&gt;This is the note.&lt;/Note&gt;<br/>
</p></div><p>When rendered the document could be made to look like this:</p><div class="literallayout"><p><br/>
This paragraph refers to a note.<br/>
1<br/>
... rest of page ...<br/>
<br/>
1: This is a note.<br/>
...end of page<br/>
</p></div></div><div class="section" title="Discussion"><div class="titlepage"><h3 class="title" id="d55e1311">Discussion</h3></div><p>Using this pattern can lead to easier to use documents. Since authors expect notes to
			be separated from the flow of text, this pattern can lead to more natural mark
			up.</p><p>Rendering software can be simplified if the notes are declared before they will be
			used. For example if the note is to go on the bottom of a page, the rendering software
			can calculate page breaks on the fly if the size of the note is already known when the
			reference to it is encountered.</p></div><div class="section" title="Related Patterns"><div class="titlepage"><h3 class="title" id="d55e1318">Related Patterns</h3></div><p>This is an example of a Domain Element from the publishing world.</p><p>Also consider using Declare Before First Use with this pattern.</p></div><div class="section" title="Known Uses"><div class="titlepage"><h3 class="title" id="d55e1325">Known Uses</h3></div><p>…</p></div><div class="section" title="References"><div class="titlepage"><h3 class="title" id="d55e1330">References</h3></div><p>This is a generalization of: Footnote Pattern on the The XML Specification Guide web
			site.</p></div></div></div><div class="chapter" title="Chapter 5. Flexibility" id="d55e1335"><div class="titlepage"><h2 class="title">Chapter 5. Flexibility</h2><div><div class="abstract" title="Abstract"><p class="title"><strong>Abstract</strong></p><p>Ways to add or reduce the flexibility of documents.</p></div></div></div><dl class="toc"><dt>Table of Contents</dt><dd><ol class="chapter"><li class="section"><a href="#d55e1342">Catch-All Element</a><ol><li class="section"><a href="#d55e1349">Problem</a></li><li class="section"><a href="#d55e1354">Context</a></li><li class="section"><a href="#d55e1359">Forces</a></li><li class="section"><a href="#d55e1366">Solution</a></li><li class="section"><a href="#d55e1371">Examples</a></li><li class="section"><a href="#d55e1390">Discussion</a></li><li class="section"><a href="#d55e1397">Related Patterns</a></li><li class="section"><a href="#d55e1402">Known Uses</a></li></ol></li><li class="section"><a href="#d55e1407">Extensible Content Model</a><ol><li class="section"><a href="#d55e1414">Problem</a></li><li class="section"><a href="#d55e1419">Context</a></li><li class="section"><a href="#d55e1424">Forces</a></li><li class="section"><a href="#d55e1429">Solution</a></li><li class="section"><a href="#d55e1434">Examples</a></li><li class="section"><a href="#d55e1482">Discussion</a></li><li class="section"><a href="#d55e1489">Related Patterns</a></li><li class="section"><a href="#d55e1494">Known Uses</a></li><li class="section"><a href="#d55e1503">References</a></li></ol></li><li class="section"><a href="#d55e1508">Generic Element</a><ol><li class="section"><a href="#d55e1515">Problem</a></li><li class="section"><a href="#d55e1520">Context</a></li><li class="section"><a href="#d55e1525">Forces</a></li><li class="section"><a href="#d55e1530">Solution</a></li><li class="section"><a href="#d55e1535">Examples</a></li><li class="section"><a href="#d55e1540">Discussion</a></li><li class="section"><a href="#d55e1547">Related Patterns</a></li><li class="section"><a href="#d55e1552">Known Uses</a></li><li class="section"><a href="#d55e1557">References</a></li></ol></li><li class="section"><a href="#d55e1562">Role Attribute</a><ol><li class="section"><a href="#d55e1569">Problem</a></li><li class="section"><a href="#d55e1574">Context</a></li><li class="section"><a href="#d55e1579">Forces</a></li><li class="section"><a href="#d55e1584">Solution</a></li><li class="section"><a href="#d55e1589">Examples</a></li><li class="section"><a href="#d55e1600">Discussion</a></li><li class="section"><a href="#d55e1607">Related Patterns</a></li><li class="section"><a href="#d55e1612">Known Uses</a></li></ol></li></ol></dd></dl><div class="section" title="Catch-All Element"><div class="titlepage"><h2 class="title" id="d55e1342">Catch-All Element</h2><div><div class="abstract" title="Abstract"><p class="title"><strong>Abstract</strong></p><p>A container element for dealing with unknown elements within the document.</p></div></div></div><div class="section" title="Problem"><div class="titlepage"><h3 class="title" id="d55e1349">Problem</h3></div><p>Users need to be able to insert marked up text into the document that the document
			designer cannot foresee. For example, it is often necessary to have some presentation
			specific markup inside of a document. If this unexpected markup is spread throughout the
			document, then processors might have a hard time dealing with it.</p></div><div class="section" title="Context"><div class="titlepage"><h3 class="title" id="d55e1354">Context</h3></div><p>When documents are going to need to have the flexibility to include elements from
			other namespaces.</p></div><div class="section" title="Forces"><div class="titlepage"><h3 class="title" id="d55e1359">Forces</h3></div><p>Allowing elements from other document types allows you to save development costs and
			time by reusing schemas instead of developing them.</p><p>Allowing documents to use other schemas allows for great flexibility.</p></div><div class="section" title="Solution"><div class="titlepage"><h3 class="title" id="d55e1366">Solution</h3></div><p>Create a new element which will serve as a container for elements of a new
			schema.</p></div><div class="section" title="Examples"><div class="titlepage"><h3 class="title" id="d55e1371">Examples</h3></div><div class="example"><a id="d55e1374"/><p class="title"><strong>Example 5.1. Example</strong></p><div class="example-contents"><p>This example shows how a document that describes a car would allow a comment
				element that includes elements from HTML.</p><div class="literallayout"><p> <br/>
			                 &lt;car&gt;<br/>
			                  &lt;model&gt;Pinto&lt;/model&gt;<br/>
			                  &lt;year&gt;1979&lt;/year&gt;<br/>
			                  &lt;comment&gt;<br/>
			                      &lt;xhtml:p xmlns:xhtml="http://www.w3.org/1999/xhtml"&gt;<br/>
			                      This car &lt;xhtml:b&gt;runs great!&lt;/xhtml:b&gt;<br/>
			                      &lt;/xhtml:p&gt;<br/>
			                  &lt;/comment&gt;<br/>
			                 &lt;/car&gt;<br/>
                </p></div></div></div><br class="example-break"/><div class="example"><a id="d55e1381"/><p class="title"><strong>Example 5.2. Example</strong></p><div class="example-contents"><p>To allow this type of inclusion using an XML Schema, use the any element as
				follows:</p><div class="literallayout"><p>   <br/>
			                  &lt;element name="car"&gt;<br/>
			                   &lt;complexType&gt;<br/>
			                    &lt;sequence&gt;<br/>
			                     &lt;element name="model" type="string"/&gt;<br/>
			                     &lt;element name="year"   type="string"/&gt;<br/>
			                     &lt;element name="comment"&gt;<br/>
			                      &lt;complexType&gt;<br/>
			                       &lt;sequence&gt;<br/>
			                        &lt;any namespace="http://www.w3.org/1999/xhtml"<br/>
			                             minOccurs="1" maxOccurs="unbounded"<br/>
			                             processContents="skip"/&gt;<br/>
			                       &lt;/sequence&gt;<br/>
			                      &lt;/complexType&gt;<br/>
			                     &lt;/element&gt;<br/>
			                    &lt;/sequence&gt;<br/>
			                   &lt;/complexType&gt;<br/>
			                  &lt;/element&gt;<br/>
                </p></div></div></div><br class="example-break"/><p>For details on the use of the any element see: The XML Schema Part 0: Primer Section
			5.5 Any Element, Any Attribute</p></div><div class="section" title="Discussion"><div class="titlepage"><h3 class="title" id="d55e1390">Discussion</h3></div><p>The element within the catch-all element are from a namespace outside of the namespace
			of the document-type being created.</p><p>This tag acts as a warning to processors that some markup from another namespace is
			about to be encountered.</p></div><div class="section" title="Related Patterns"><div class="titlepage"><h3 class="title" id="d55e1397">Related Patterns</h3></div><p>The Envelope pattern uses a similar mechanism, but the intent of the Envelope is to
			wrap a document without adding any domain data of its own. The intent of the Catch-All
			Element is to allow authors to mix data from separate document types.</p></div><div class="section" title="Known Uses"><div class="titlepage"><h3 class="title" id="d55e1402">Known Uses</h3></div><p>The Real Estate DTD RELML uses an OTHER as a catch all element.</p></div></div><div class="section" title="Extensible Content Model"><div class="titlepage"><h2 class="title" id="d55e1407">Extensible Content Model</h2><div><div class="abstract" title="Abstract"><p class="title"><strong>Abstract</strong></p><p>Provide a mechanism which allows additional elements to be added into existing
				content models.</p></div></div></div><div class="section" title="Problem"><div class="titlepage"><h3 class="title" id="d55e1414">Problem</h3></div><p>At the time of designing the document type, the designer may not be able to foresee
			all of the uses and situations where document instances will be used. To provide for
			flexibility, the contents of elements can be made to be redefinable by the document
			instance.</p></div><div class="section" title="Context"><div class="titlepage"><h3 class="title" id="d55e1419">Context</h3></div><p>This is a very general mechanism that can be used anytime additional flexibility is
			needed.</p></div><div class="section" title="Forces"><div class="titlepage"><h3 class="title" id="d55e1424">Forces</h3></div><p>Flexibility is often required for a document type to be able to be used effectively.
			Flexibility, however often makes processing of the documents more difficult.
			Customization of software is often needed to deal with the flexibility.</p></div><div class="section" title="Solution"><div class="titlepage"><h3 class="title" id="d55e1429">Solution</h3></div><p>The designer of the document can add a mechanism to allow the author of a document
			instance to extend an element definition from the document type.</p></div><div class="section" title="Examples"><div class="titlepage"><h3 class="title" id="d55e1434">Examples</h3></div><div class="example"><a id="d55e1437"/><p class="title"><strong>Example 5.3. Using DTDs</strong></p><div class="example-contents"><p>This example uses a DTD that allows the document instance to extend an Address
				element. This is done through use a parameter entity which is defined in the DTD,
				but the creator of the document instance can overwrite.</p><p>First a DTD is created that defines a simple Address type, consisting only of the
				Name, Street and City. Realizing that this may not be enough for all users of this
				document type, the designer defines a parameter entity called local.address that is
				blank ("") but can be extended in the document instance.</p><div class="example"><a id="d55e1444"/><p class="title"><strong>Example 5.4. purchase_order.dtd</strong></p><div class="example-contents"><pre class="screen">
    
    </pre><div class="literallayout"><p><br/>
&lt;!ENTITY % local.address ""&gt;<br/>
&lt;!ENTITY % address "Name, Street, City %local.address;"&gt;<br/>
&lt;!ELEMENT PurchaseOrder ( Item, ShipTo, BillTo )&gt;<br/>
&lt;!ELEMENT Item   (#PCDATA)&gt;<br/>
&lt;!ELEMENT ShipTo (%address;)&gt;;<br/>
&lt;!ELEMENT BillTo (%address;)&gt;;<br/>
&lt;!ELEMENT Name   (#PCDATA)&gt;<br/>
&lt;!ELEMENT Street (#PCDATA)&gt;<br/>
&lt;!ELEMENT City   (#PCDATA)&gt;<br/>
</p></div></div></div><br class="example-break"/><p>The creator of a document decides that the address defined in the DTD is
				inadequate for the document being create, so he extends the definition of an Address
				to include State and Zip. To do this he creates his own definition of the
				local.address Parameter Entity. This allows him to add these elements to his own
				address structure.</p><div class="example"><a id="d55e1453"/><p class="title"><strong>Example 5.5. mydoc.xml</strong></p><div class="example-contents"><div class="literallayout"><p><br/>
&lt;!DOCTYPE PURCHASE_ORDER SYSTEM "purchase_order.dtd" [<br/>
&lt;!ENTITY % local.address ", State, Zip" &gt;<br/>
&lt;!ELEMENT State (#PCDATA)&gt;<br/>
&lt;!ELEMENT Zip (#PCDATA)&gt;<br/>
]&gt;<br/>
&lt;PurchaseOrder&gt;<br/>
&lt;Item&gt;X123&lt;/Item&gt;<br/>
&lt;ShipTo&gt;<br/>
&lt;Name&gt;Bob Smith&lt;/Name&gt;<br/>
&lt;Street&gt;123 Maple Dr.&lt;/Street&gt;<br/>
&lt;City&gt;Anytown&lt;/City&gt;<br/>
&lt;State&gt;CA&lt;/State&gt;<br/>
&lt;Zip&gt;12345&lt;/Zip&gt;<br/>
&lt;/ShipTo&gt;<br/>
&lt;BillTo&gt;<br/>
&lt;Name&gt;Bob Smith&lt;/Name&gt;<br/>
&lt;Street&gt;123 Maple Dr.&lt;/Street&gt;<br/>
&lt;City&gt;Anytown&lt;/City&gt;<br/>
&lt;State&gt;CA&lt;/State&gt;<br/>
&lt;Zip&gt;12345&lt;/Zip&gt;<br/>
&lt;/BillTo&gt;<br/>
&lt;/PurchaseOrder&gt;<br/>
</p></div></div></div><br class="example-break"/></div></div><br class="example-break"/><div class="example"><a id="d55e1458"/><p class="title"><strong>Example 5.6. Using XML Schemas</strong></p><div class="example-contents"><p>This next example uses XML Schemas to do the same thing. We use the XML Schema
				mechanism of deriving types by extension to do this. This example is based on a
				working draft of the XML Schema proposal, so this example may not be compatible with
				future versions of the XML Schema. A schema is created to include the simple Address
				type with a Name, Street, and City.</p><div class="example"><a id="d55e1463"/><p class="title"><strong>Example 5.7. PurchaseOrder.xsd</strong></p><div class="example-contents"><div class="literallayout"><p><br/>
&lt;xsd:schema<br/>
xmlns:xsd="http://www.w3.org/1999/XMLSchema"&gt;<br/>
<br/>
&lt;xsd:element<br/>
name="purchaseOrder"<br/>
type="PurchaseOrderType"/&gt;<br/>
&lt;xsd:complexType name="PurchaseOrderType"&gt;<br/>
&lt;xsd:element name="Item"   type="xsd:string"/&gt;<br/>
&lt;xsd:element name="ShipTo" type="Address"/&gt;<br/>
&lt;xsd:element name="BillTo" type="Address"/&gt;<br/>
&lt;/xsd:complexType&gt;<br/>
<br/>
&lt;xsd:complexType name="Address"&gt;<br/>
&lt;xsd:element name="Name"   type="xsd:string"/&gt;<br/>
&lt;xsd:element name="Street" type="xsd:string"/&gt;<br/>
&lt;xsd:element name="City"   type="xsd:string"/&gt;<br/>
&lt;/xsd:complexType&gt;<br/>
<br/>
&lt;/xsd:schema&gt;<br/>
</p></div></div></div><br class="example-break"/><p>The author of a document realizes that this simple address definition will not be
				adequate, so a new address type is created. The new type is extended from the old
				type, and adds the State and Zip elements.</p><div class="example"><a id="d55e1470"/><p class="title"><strong>Example 5.8. US-Address.xsd</strong></p><div class="example-contents"><div class="literallayout"><p><br/>
&lt;xsd:schema<br/>
xmlns:xsd="http://www.w3.org/1999/XMLSchema"<br/>
xmlns:po="http:www.xmlpatterns.com/PurchaseOrder"&gt;<br/>
<br/>
&lt;xsd:complexType name="US-Address"<br/>
base="po:Address"<br/>
derivedBy="extension"&gt;<br/>
&lt;xsd:element name="State"  type="xsd:string"/&gt;<br/>
&lt;xsd:element name="Zip"    type="xsd:decimal"/&gt;<br/>
&lt;/xsd:complexType&gt;<br/>
<br/>
&lt;/xsd:schema&gt;<br/>
</p></div></div></div><br class="example-break"/><p>To use the new address type in a document instance, both of the schema files are
				used.</p><div class="example"><a id="d55e1477"/><p class="title"><strong>Example 5.9. mydoc.xml</strong></p><div class="example-contents"><div class="literallayout"><p><br/>
&lt;PurchaseOrder<br/>
xmlns="http:www.xmlpatterns.com/PurchaseOrder"<br/>
xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance"<br/>
xmlns:us="http://www.xmlpatterns.com/US-Address"<br/>
xsi:schemaLocation=<br/>
"http://www.xmlpatterns.com/purchaseOrder.xsd<br/>
http://www.xmlpatterns.com/US-Address.xsd"&gt;<br/>
<br/>
&lt;Item&gt;X123&lt;/Item&gt;<br/>
&lt;ShipTo xsi:type="us:US-Address"&gt;<br/>
&lt;Name&gt;Bob Smith&lt;/Name&gt;<br/>
&lt;Street&gt;123 Maple Dr.&lt;/Street&gt;<br/>
&lt;City&gt;Anytown&lt;/City&gt;<br/>
&lt;State&gt;CA&lt;/State&gt;<br/>
&lt;Zip&gt;12345&lt;/Zip&gt;<br/>
&lt;/ShipTo&gt;<br/>
&lt;BillTo xsi:type="us:US-Address"&gt;<br/>
&lt;Name&gt;Bob Smith&lt;/Name&gt;<br/>
&lt;Street&gt;123 Maple Dr.&lt;/Street&gt;<br/>
&lt;City&gt;Anytown&lt;/City&gt;<br/>
&lt;State&gt;CA&lt;/State&gt;<br/>
&lt;Zip&gt;12345&lt;/Zip&gt;<br/>
&lt;/BillTo&gt;<br/>
&lt;/PurchaseOrder&gt;<br/>
</p></div></div></div><br class="example-break"/></div></div><br class="example-break"/></div><div class="section" title="Discussion"><div class="titlepage"><h3 class="title" id="d55e1482">Discussion</h3></div><p>This provides a powerful extension mechanism to the authors of documents. Like with
			all added flexibility, the power comes with a price. Extensible Content Models create
			new element types that standard processing tools for a document type would not be able
			to process correctly. Often customization of software is needed to handle the extensions
			correctly.</p><p>This technique has the advantage of not needlessly over complicating the structure of
			the document type if the flexibility is not needed. Authors can use the document type
			without even being aware that the extension mechanism exists. The existence of these
			Extensible Content Models can be made known only to "power users", if
			desired.</p></div><div class="section" title="Related Patterns"><div class="titlepage"><h3 class="title" id="d55e1489">Related Patterns</h3></div><p>This mechanism is powerful, but also requires knowledge of DTD syntax to apply. Often
			the Generic Element pattern combined with Role Attributes may be a more appropriate
			choice if the authors of the document are not experienced with XML.</p></div><div class="section" title="Known Uses"><div class="titlepage"><h3 class="title" id="d55e1494">Known Uses</h3></div><p>The Information and Content Exchange (ICE) Protocol Appendix A demonstrates
			applications of this pattern.</p><p>The XMLspec DTD uses parameter entities to allow for customization of many
			elements.</p><p>The DocBook DTD allows for the types of customizations .</p></div><div class="section" title="References"><div class="titlepage"><h3 class="title" id="d55e1503">References</h3></div><p>See Structuring XML Documents, Section 8.1.2: Adding Elements Types to a DTD.</p></div></div><div class="section" title="Generic Element"><div class="titlepage"><h2 class="title" id="d55e1508">Generic Element</h2><div><div class="abstract" title="Abstract"><p class="title"><strong>Abstract</strong></p><p>To provide flexibility to users of the document, designers can provide an element
				type that is very generic. The use of the generic element is not well specified by
				the documents type. This allows for authors to use the document type in ways that
				may not have been foreseen.</p></div></div></div><div class="section" title="Problem"><div class="titlepage"><h3 class="title" id="d55e1515">Problem</h3></div><p>The designer does not know exactly what the users of the document intend to do with
			the document and needs to add flexibility to the document type.</p></div><div class="section" title="Context"><div class="titlepage"><h3 class="title" id="d55e1520">Context</h3></div><p>This is useful in general purpose document types, when flexibility is needed.</p></div><div class="section" title="Forces"><div class="titlepage"><h3 class="title" id="d55e1525">Forces</h3></div><p>Flexibility is required to make some document types useful. This pattern can effect
			the ease of processing of the document type.</p></div><div class="section" title="Solution"><div class="titlepage"><h3 class="title" id="d55e1530">Solution</h3></div><p>Provide a new element that does not have a specific meaning.</p></div><div class="section" title="Examples"><div class="titlepage"><h3 class="title" id="d55e1535">Examples</h3></div><div class="literallayout"><p><br/>
&lt;Paragraph&gt;<br/>
Albert Camus' &lt;General type="book"&gt;The Stranger&lt;/General&gt;<br/>
is an existentialist novel.<br/>
&lt;/Paragraph&gt;<br/>
</p></div></div><div class="section" title="Discussion"><div class="titlepage"><h3 class="title" id="d55e1540">Discussion</h3></div><p>Not providing enough flexibility can make document authors use the wrong element for
			markup. This can lead to documents that are difficult to understand, and mistakes in
			processing occur.</p><p>This flexibility can make processing software difficult to create. Adding Role
			Attributes to the generic element can help provide the processing software some clues as
			to how to process the element.</p></div><div class="section" title="Related Patterns"><div class="titlepage"><h3 class="title" id="d55e1547">Related Patterns</h3></div><p>A Role Attribute is often used in conjunction with Generic Elements.</p></div><div class="section" title="Known Uses"><div class="titlepage"><h3 class="title" id="d55e1552">Known Uses</h3></div><p>The div and span elements in XHTML.</p></div><div class="section" title="References"><div class="titlepage"><h3 class="title" id="d55e1557">References</h3></div><p>The Fielded Text example from The XML &amp; SGML Cookbook page 2-48, uses Generic
			Elements.</p></div></div><div class="section" title="Role Attribute"><div class="titlepage"><h2 class="title" id="d55e1562">Role Attribute</h2><div><div class="abstract" title="Abstract"><p class="title"><strong>Abstract</strong></p><p>Sometimes the designer of a DTD can not foresee all of the needs that the author
				of a document will have. In order to give the author flexibility an attribute that
				specifies a role can be included on some of the elements.</p></div></div></div><div class="section" title="Problem"><div class="titlepage"><h3 class="title" id="d55e1569">Problem</h3></div><p>Specialization of the document type sometimes needs to be made by an author. It is
			impossible for the designer of the DTD to foresee all of the uses that the authors have
			in mind. The designer may not even know where in the document the specialization will
			need to take place.</p></div><div class="section" title="Context"><div class="titlepage"><h3 class="title" id="d55e1574">Context</h3></div><p>For any document type that is intended for use outside a very limited context, users
			need flexibility to include uses which the designed of the document type has not
			foreseen.</p></div><div class="section" title="Forces"><div class="titlepage"><h3 class="title" id="d55e1579">Forces</h3></div><p>By definition, document types constrain the choices that a document author can make.
			This constraint can at times be too limiting. Document users need flexibility to use the
			document type in ways not foreseen by the designer of the document type.</p></div><div class="section" title="Solution"><div class="titlepage"><h3 class="title" id="d55e1584">Solution</h3></div><p>An attribute is created which can further describe the element. This role attribute
			further specializes the use of the Element.</p></div><div class="section" title="Examples"><div class="titlepage"><h3 class="title" id="d55e1589">Examples</h3></div><div class="literallayout"><p><br/>
&lt;!ELEMENT Document (Paragraph)*&gt;<br/>
&lt;!ELEMENT Paragraph (#PCDATA)&gt;<br/>
&lt;!ATTLIST Paragraph Role CDATA&gt;<br/>
</p></div><p>Using the above DTD the author can create a document like this:</p><div class="literallayout"><p><br/>
&lt;Document&gt;<br/>
&lt;Paragraph Role="warning"&gt;<br/>
Do not attempt this at home.<br/>
&lt;/Paragraph&gt;<br/>
&lt;Paragraph&gt;<br/>
The following is a set of<br/>
instructions for creating<br/>
a bungee jumping cord from<br/>
elastic bands ...<br/>
&lt;/Paragraph&gt;<br/>
&lt;/Document&gt;<br/>
</p></div><p>The author intends for the "Do not attempt this at home" paragraph to appear
			emphasized in some way, for example in bold or in a different color. The DTD designer
			would have had no way of knowing the special needs of the author of the document, so a
			Role Attribute was placed on the paragraph, to allow for different types of paragraphs
			to exist.</p></div><div class="section" title="Discussion"><div class="titlepage"><h3 class="title" id="d55e1600">Discussion</h3></div><p>Including role attributes allows the author to have a great deal of flexibility. The
			flexibility may make the creation of processing software very difficult. Processing
			software will not be able to know in advance the intention of the author. However, by
			allowing customization of processing software through the use of scripts or stylesheet,
			this can be a very powerful pattern. Much of the power of XSLT and CSS comes from being
			able to add Role Attributes.</p><p>Role attributes can be used to extend the document type without changing the structure
			of documents. This can help extend the life of the document type between revisions, and
			can be used to prototype new features of the document type.</p></div><div class="section" title="Related Patterns"><div class="titlepage"><h3 class="title" id="d55e1607">Related Patterns</h3></div><p>Role attributes are almost always used on Generic Element types. Generic Elements are
			created when the designer of a document type does not know all of the uses of that
			element, and the Role Attribute allows the author of a document to make the element more
			specialized to his or her use of the element.</p></div><div class="section" title="Known Uses"><div class="titlepage"><h3 class="title" id="d55e1612">Known Uses</h3></div><p>XHTML uses several role attributes including class and meta element in XHTML.</p><p>The XMLspec DTD role attribute shows a typical usage of this pattern.</p></div></div></div><div class="chapter" title="Chapter 6. Consistency" id="d55e1619"><div class="titlepage"><h2 class="title">Chapter 6. Consistency</h2><div><div class="abstract" title="Abstract"><p class="title"><strong>Abstract</strong></p><p>How to create consistent markup.</p></div></div></div><dl class="toc"><dt>Table of Contents</dt><dd><ol class="chapter"><li class="section"><a href="#d55e1626">Common Attributes</a><ol><li class="section"><a href="#d55e1633">Problem</a></li><li class="section"><a href="#d55e1638">Context</a></li><li class="section"><a href="#d55e1643">Forces</a></li><li class="section"><a href="#d55e1648">Solution</a></li><li class="section"><a href="#d55e1653">Examples</a></li><li class="section"><a href="#d55e1670">Discussion</a></li><li class="section"><a href="#d55e1677">Related Patterns</a></li><li class="section"><a href="#d55e1682">Known Uses</a></li><li class="section"><a href="#d55e1695">References</a></li><li class="section"><a href="#d55e1700">Contributions</a></li></ol></li><li class="section"><a href="#d55e1705">Consistent Element Set</a><ol><li class="section"><a href="#d55e1712">Problem</a></li><li class="section"><a href="#d55e1717">Context</a></li><li class="section"><a href="#d55e1722">Forces</a></li><li class="section"><a href="#d55e1727">Solution</a></li><li class="section"><a href="#d55e1732">Examples</a></li><li class="section"><a href="#d55e1751">Discussion</a></li><li class="section"><a href="#d55e1756">Related Patterns</a></li><li class="section"><a href="#d55e1761">Known Uses</a></li></ol></li><li class="section"><a href="#d55e1766">Parallel Design</a><ol><li class="section"><a href="#d55e1773">Problem</a></li><li class="section"><a href="#d55e1778">Context</a></li><li class="section"><a href="#d55e1783">Forces</a></li><li class="section"><a href="#d55e1788">Solution</a></li><li class="section"><a href="#d55e1793">Examples</a></li><li class="section"><a href="#d55e1800">Discussion</a></li><li class="section"><a href="#d55e1805">Related Patterns</a></li><li class="section"><a href="#d55e1810">Known Uses</a></li><li class="section"><a href="#d55e1819">References</a></li></ol></li></ol></dd></dl><div class="section" title="Common Attributes"><div class="titlepage"><h2 class="title" id="d55e1626">Common Attributes</h2><div><div class="abstract" title="Abstract"><p class="title"><strong>Abstract</strong></p><p>Provide a set of attributes that can be placed on all, or most, elements in the
				document type.</p></div></div></div><div class="section" title="Problem"><div class="titlepage"><h3 class="title" id="d55e1633">Problem</h3></div><p>There are properties that belong to every element in the document. These properties
			need to be presented to the document author in an understandable way.</p></div><div class="section" title="Context"><div class="titlepage"><h3 class="title" id="d55e1638">Context</h3></div><p>This is a widely applicable pattern and can be used anywhere that a large number of
			elements need the same attributes applied. It is a common technique for attributes such
			as IDs, security, and roles.</p></div><div class="section" title="Forces"><div class="titlepage"><h3 class="title" id="d55e1643">Forces</h3></div><p>The usability of the document type depends a lot on consistency, and this pattern can
			be used to add consistency.</p></div><div class="section" title="Solution"><div class="titlepage"><h3 class="title" id="d55e1648">Solution</h3></div><p>Create a common set of attributes that will be used by all or most of the elements in
			the document type.</p></div><div class="section" title="Examples"><div class="titlepage"><h3 class="title" id="d55e1653">Examples</h3></div><div class="example"><a id="d55e1656"/><p class="title"><strong>Example 6.1. Common Attributes in DTDs</strong></p><div class="example-contents"><p>This examples shows a DTD that has two common attributes, id and role, on its all
				of its elements. The common attribute definition is placed in a parameter entity
				which is referenced by all of the ATTLIST definitions.</p><div class="literallayout"><p><br/>
                    &lt;!ENTITY % common.att<br/>
                    'id   ID      #IMPLIED<br/>
                    role NMTOKEN #IMPLIED'&gt;<br/>
                    <br/>
                    &lt;!ELEMENT Person (FirstName, LastName)&gt;<br/>
                    &lt;!ATTLIST Person %common.att;&gt;<br/>
                    <br/>
                    &lt;!ELEMENT FirstName (#PCDATA)&gt;<br/>
                    &lt;!ATTLIST FirstName %common.att;&gt;<br/>
                    <br/>
                    &lt;!ELEMENT LastName (#PCDATA)&gt;<br/>
                    &lt;!ATTLIST LastName %common.att;&gt;<br/>
                </p></div></div></div><br class="example-break"/><div class="example"><a id="d55e1663"/><p class="title"><strong>Example 6.2. Common Attributes in XML Schemas</strong></p><div class="example-contents"><p>This example shows how to implement the same document structure as the above
				examples using the XSL Schema language Attributes Groups .</p><div class="literallayout"><p><br/>
                    &lt;?xml version="1.0"?&gt;<br/>
                    &lt;schema xmlns="http://www.w3.org/1999/XMLSchema"<br/>
                    targetNamespace="http://www.xmlpatterns.com/XMLSchema-fragment"<br/>
                    xmlns:xsf="http://www.xmlpatterns.com/XMLSchema-fragment"&gt;<br/>
                    <br/>
                    &lt;attributeGroup name="CommonAtts"&gt;<br/>
                    &lt;attribute name="id" type="ID"/&gt;<br/>
                    &lt;attribute name="role" type="NMTOKEN"/&gt;<br/>
                    &lt;/attributeGroup&gt;<br/>
                    <br/>
                    &lt;complexType name="NameType"&gt;<br/>
                    &lt;attributeGroup ref="CommonAtts"/&gt;<br/>
                    &lt;/complexType&gt;<br/>
                    <br/>
                    &lt;complexType name="PersonType" content="elementOnly"&gt;<br/>
                    &lt;element name="FirstName" type="xsf:NameType"/&gt;<br/>
                    &lt;element name="LastName" type="xsf:NameType"/&gt;<br/>
                    &lt;attributeGroup ref="CommonAtts"/&gt;<br/>
                    &lt;/complexType&gt;<br/>
                    <br/>
                    &lt;element name="Person" type="xsf:PersonType"/&gt;<br/>
                    <br/>
                    &lt;/schema&gt;<br/>
                </p></div></div></div><br class="example-break"/></div><div class="section" title="Discussion"><div class="titlepage"><h3 class="title" id="d55e1670">Discussion</h3></div><p>Global attributes often add many choices at any point in the document. Users have more
			selections available to them, and this could complicate authoring, however, some of the
			complexity that adding attributes to every element brings is lessened if these
			attributes are applied consistently. If users can expect the same common attribute on
			every element, it does not take a lot of extra effort to process the information. It
			will be easier to author or process a document that has a consistently applied set of
			common attributes on all elements compared to one that has inconsistently applied
			attributes on most of the elements.</p><p>An ID attribute is a typical use for a common attribute. It is useful to be able to
			reference any element in the document using this.</p></div><div class="section" title="Related Patterns"><div class="titlepage"><h3 class="title" id="d55e1677">Related Patterns</h3></div><p>The common attributes are usually declared in a Flyweight to help
			maintainability.</p></div><div class="section" title="Known Uses"><div class="titlepage"><h3 class="title" id="d55e1682">Known Uses</h3></div><p>The XMLspec DTD Common Attributes Chapter explains the use of common attributes in the
			DTD.</p><p>XHTML defines a set of core attributes. These attributes are applied to almost every
			element in the XHTML document type. The core attributes are defined like this:</p><div class="literallayout"><p><br/>
&lt;!ENTITY % coreattrs<br/>
"id     ID           #IMPLIED<br/>
class  CDATA        #IMPLIED<br/>
style  %StyleSheet; #IMPLIED<br/>
title  %Text;       #IMPLIED"<br/>
&gt;<br/>
            </p></div><p>Even the simple line break element has these attributes added to it:</p><div class="literallayout"><p><br/>
&lt;!ELEMENT br EMPTY&gt;  &lt;!-- forced line break --&gt;<br/>
&lt;!ATTLIST br<br/>
%coreattrs;<br/>
&gt;<br/>
            </p></div></div><div class="section" title="References"><div class="titlepage"><h3 class="title" id="d55e1695">References</h3></div><p>See Structuring XML Documents, Section 3.2.4: Global Attributes.</p></div><div class="section" title="Contributions"><div class="titlepage"><h3 class="title" id="d55e1700">Contributions</h3></div><p>Thanks to Hans C. Arents for supplying the correct XSL Schema definition used in the
			pattern.</p></div></div><div class="section" title="Consistent Element Set"><div class="titlepage"><h2 class="title" id="d55e1705">Consistent Element Set</h2><div><div class="abstract" title="Abstract"><p class="title"><strong>Abstract</strong></p><p>Provide a set of elements which is consistently grouped together as the content
				models of a number of other elements.</p></div></div></div><div class="section" title="Problem"><div class="titlepage"><h3 class="title" id="d55e1712">Problem</h3></div><p>Providing a flexible DTD structure could require authors to learn which element types
			can be used in content models of a variety of other element types. Having different
			content models for every element makes it difficult to authors to learn a DTD, and could
			make processing software more complex.</p></div><div class="section" title="Context"><div class="titlepage"><h3 class="title" id="d55e1717">Context</h3></div><p>Anywhere where a large number of elements can be sub elements of many different parent
			element types.</p></div><div class="section" title="Forces"><div class="titlepage"><h3 class="title" id="d55e1722">Forces</h3></div><p>Large number of elements are difficult to use effectively. They can be difficult to
			learn and process.</p></div><div class="section" title="Solution"><div class="titlepage"><h3 class="title" id="d55e1727">Solution</h3></div><p>Where sub elements appear, consistently provide the same set of elements in many
			different places. This reduces the learning requirements of authors. Usually the element
			set is defined with an entity parameter, and the entity parameter is referred to from
			each place the set needs to appear.</p></div><div class="section" title="Examples"><div class="titlepage"><h3 class="title" id="d55e1732">Examples</h3></div><div class="example"><a id="d55e1735"/><p class="title"><strong>Example 6.3. Example</strong></p><div class="example-contents"><p>A DTD with inconsistent sets of elements in content model of various elements are
				difficult to learn how to use. For example:</p><div class="literallayout"><p><br/>
                    &lt;!ELEMENT Foo (A|B|C|E)*&gt;<br/>
                    &lt;!ELEMENT Bar (A|B|C|D)*&gt;<br/>
                    &lt;!ELEMENT Baz (A|C|D|E)*&gt;<br/>
                </p></div></div></div><br class="example-break"/><div class="example"><a id="d55e1742"/><p class="title"><strong>Example 6.4. Example</strong></p><div class="example-contents"><p>The next DTD is much easier to learn how to use, but some compromises must be
				made. It is often better to introduce consistency for the sake of
				ease-of-use.</p><div class="literallayout"><p><br/>
&lt;!ENTITY % content "A|B|C|D|E"&gt;<br/>
&lt;!ELEMENT Foo (%content;)*&gt;<br/>
&lt;!ELEMENT Bar (%content;)*&gt;<br/>
&lt;!ELEMENT Baz (%content;)*&gt;<br/>
</p></div><p>Here the author has more flexibility, but there is more consistency. This can make
				it easier for processing software as well.</p></div></div><br class="example-break"/></div><div class="section" title="Discussion"><div class="titlepage"><h3 class="title" id="d55e1751">Discussion</h3></div><p>The resulting structure provides easier to learn, consistent sets of elements.
			Providing consistent sets of elements is far easier for authors to learn. Some
			compromises might need to be made in the details of the structure to provide this
			consistency, but this is usually worth the price.</p></div><div class="section" title="Related Patterns"><div class="titlepage"><h3 class="title" id="d55e1756">Related Patterns</h3></div><p>…</p></div><div class="section" title="Known Uses"><div class="titlepage"><h3 class="title" id="d55e1761">Known Uses</h3></div><p>In XHTML, there are element sets for block content, and inline content. The block
			content element set is used for all content that can be used at the paragraph level.
			Inline content is used consistently within paragraphs.</p></div></div><div class="section" title="Parallel Design"><div class="titlepage"><h2 class="title" id="d55e1766">Parallel Design</h2><div><div class="abstract" title="Abstract"><p class="title"><strong>Abstract</strong></p><p>Creating structures that for different elements that are very similar to one
				another makes DTD easier to use and understand.</p></div></div></div><div class="section" title="Problem"><div class="titlepage"><h3 class="title" id="d55e1773">Problem</h3></div><p>Authoring a document with complex structure can be difficult if there are many
			elements, and each of these elements has their own particular content models.</p></div><div class="section" title="Context"><div class="titlepage"><h3 class="title" id="d55e1778">Context</h3></div><p>Any document that is large enough to be potentially difficult to learn.</p></div><div class="section" title="Forces"><div class="titlepage"><h3 class="title" id="d55e1783">Forces</h3></div><p>Having consistency in the structure of document types makes document instances easier
			to learn and process.</p></div><div class="section" title="Solution"><div class="titlepage"><h3 class="title" id="d55e1788">Solution</h3></div><p>For elements that are similar in function use structures that are as close to
			identical as possible.</p></div><div class="section" title="Examples"><div class="titlepage"><h3 class="title" id="d55e1793">Examples</h3></div><div class="literallayout"><p><br/>
&lt;!ELEMENT Figure (Title, FigureBody, Number?)&gt;<br/>
&lt;!ATTLIST Figure height CDATA<br/>
width  CDATA<br/>
id     ID  #REQUIRED&gt;<br/>
<br/>
&lt;!ELEMENT Table (Title, TableBody, Number?)&gt;<br/>
&lt;!ATTLIST Table height CDATA<br/>
width  CDATA<br/>
id     ID  #REQUIRED&gt;<br/>
</p></div><p>These two elements "Figure" and "Table" have very similar content
			and identical attribute lists. This makes it very easy for authors of the document. Once
			they have learned the structure of one of the elements, the other one will be easy to
			use. The more variation there is between the two, the easier it is to confuse the two
			structures.</p></div><div class="section" title="Discussion"><div class="titlepage"><h3 class="title" id="d55e1800">Discussion</h3></div><p>The more consistent the structure of various elements is the easier it is to learn to
			use a document type. Subtle differences in structure can be particularly difficult to
			learn. If, for example, in the above example, one of the "id" attributes was
			IMPLIED and the other one was REQUIRED, this would be a difficult distinction to
			remember. Users would constantly need to refer to the documentation to remind them which
			element's id was required and which one wasn't.</p></div><div class="section" title="Related Patterns"><div class="titlepage"><h3 class="title" id="d55e1805">Related Patterns</h3></div><p>Often the parts of the structure that are the same between two elements can be
			represented as Flyweights. This will help ensure that the two structures remain similar
			even through revisions of the document type.</p></div><div class="section" title="Known Uses"><div class="titlepage"><h3 class="title" id="d55e1810">Known Uses</h3></div><p>The DocBook DTD defines these four entities:</p><div class="literallayout"><p><br/>
&lt;!ENTITY % div.title.content<br/>
"title, subtitle?, titleabbrev?"&gt;<br/>
<br/>
&lt;!ENTITY % bookcomponent.title.content<br/>
"title, subtitle?, titleabbrev?"&gt;<br/>
<br/>
&lt;!ENTITY % sect.title.content<br/>
"title, subtitle?, titleabbrev?"&gt;<br/>
<br/>
&lt;!ENTITY % refsect.title.content<br/>
"title, subtitle?, titleabbrev?"&gt;<br/>
</p></div><p>All four of the elements have identical content model. This helps enormously in
			learning the specifics of this DTD.</p></div><div class="section" title="References"><div class="titlepage"><h3 class="title" id="d55e1819">References</h3></div><p>See Structuring XML Documents, Section 3.2.2.</p></div></div></div><div class="chapter" title="Chapter 7. Miscellaneous" id="d55e1824"><div class="titlepage"><h2 class="title">Chapter 7. Miscellaneous</h2><div><div class="abstract" title="Abstract"><p class="title"><strong>Abstract</strong></p><p>These just don't fit anywhere else.</p></div></div></div><dl class="toc"><dt>Table of Contents</dt><dd><ol class="chapter"><li class="section"><a href="#d55e1831">Content Type Label</a><ol><li class="section"><a href="#d55e1838">Problem</a></li><li class="section"><a href="#d55e1843">Context</a></li><li class="section"><a href="#d55e1848">Forces</a></li><li class="section"><a href="#d55e1853">Solution</a></li><li class="section"><a href="#d55e1858">Examples</a></li><li class="section"><a href="#d55e1865">Discussion</a></li><li class="section"><a href="#d55e1874">Related Patterns</a></li><li class="section"><a href="#d55e1879">Known Uses</a></li><li class="section"><a href="#d55e1888">References</a></li></ol></li><li class="section"><a href="#d55e1893">Reuse Document Types</a><ol><li class="section"><a href="#d55e1900">Problem</a></li><li class="section"><a href="#d55e1905">Context</a></li><li class="section"><a href="#d55e1910">Forces</a></li><li class="section"><a href="#d55e1917">Solution</a></li><li class="section"><a href="#d55e1922">Examples</a></li><li class="section"><a href="#d55e1927">Discussion</a></li><li class="section"><a href="#d55e1957">Related Patterns</a></li><li class="section"><a href="#d55e1962">Known Uses</a></li><li class="section"><a href="#d55e1967">References</a></li></ol></li><li class="section"><a href="#d55e1972">Short Understandable Names</a><ol><li class="section"><a href="#d55e1979">Problem</a></li><li class="section"><a href="#d55e1984">Context</a></li><li class="section"><a href="#d55e1989">Forces</a></li><li class="section"><a href="#d55e1994">Solution</a></li><li class="section"><a href="#d55e1999">Examples</a></li><li class="section"><a href="#d55e2004">Discussion</a></li><li class="section"><a href="#d55e2015">Related Patterns</a></li><li class="section"><a href="#d55e2020">Known Uses</a></li></ol></li><li class="section"><a href="#d55e2025">Use XML</a><ol><li class="section"><a href="#d55e2032">Problem</a></li><li class="section"><a href="#d55e2037">Context</a></li><li class="section"><a href="#d55e2064">Forces</a></li><li class="section"><a href="#d55e2069">Solution</a></li><li class="section"><a href="#d55e2074">Examples</a></li><li class="section"><a href="#d55e2079">Discussion</a></li><li class="section"><a href="#d55e2084">Related Patterns</a></li><li class="section"><a href="#d55e2089">Known Uses</a></li><li class="section"><a href="#d55e2141">References</a></li></ol></li></ol></dd></dl><div class="section" title="Content Type Label"><div class="titlepage"><h2 class="title" id="d55e1831">Content Type Label</h2><div><div class="abstract" title="Abstract"><p class="title"><strong>Abstract</strong></p><p>Parameter entities are created to represent different types of values within a
				DTD.</p></div></div></div><div class="section" title="Problem"><div class="titlepage"><h3 class="title" id="d55e1838">Problem</h3></div><p>DTDs provide limited type information for content of attributes and elements. Type
			information is often useful to have in a language.</p></div><div class="section" title="Context"><div class="titlepage"><h3 class="title" id="d55e1843">Context</h3></div><p>Any time DTDs are used and it is useful to convey type information.</p></div><div class="section" title="Forces"><div class="titlepage"><h3 class="title" id="d55e1848">Forces</h3></div><p>Expressing type information helps in creating understandable and maintainable
			DTDs.</p></div><div class="section" title="Solution"><div class="titlepage"><h3 class="title" id="d55e1853">Solution</h3></div><p>Create parameter entities to represent different data types. These parameters can be
			used in attribute and element content descriptions.</p></div><div class="section" title="Examples"><div class="titlepage"><h3 class="title" id="d55e1858">Examples</h3></div><p>The following DTD fragment is taken from a payroll system. The first line defines a
			parameter entity to represent a employee number type. In each place in the DTD where a
			employee number is needed as content, this parameter entity is used.</p><div class="literallayout"><p><br/>
&lt;!ENTITY % EmployeeNum "NMTOKEN"&gt;<br/>
<br/>
&lt;!ELEMENT Order (LineItem*)&gt;<br/>
<br/>
&lt;!ELEMENT Employee (Name, Address)&gt;<br/>
&lt;!ATTLIST Employee Number %EmployeeNum;&gt;<br/>
<br/>
&lt;!ELEMENT PayRecord (Period, Hours)&gt;<br/>
&lt;!ATTLIST PayRecord Employee %EmployeeNum;&gt;<br/>
</p></div></div><div class="section" title="Discussion"><div class="titlepage"><h3 class="title" id="d55e1865">Discussion</h3></div><p>This pattern does not change the structure or constraints of the documents that are
			instances of the DTD, but it does make the DTD easier to understand and maintain.</p><p>This pattern increases understandability of the DTD by documenting the intended use of
			the content types to readers of the DTD. Looking at the above example we can see that it
			becomes obvious that the Employee's Number attribute and the PayRecord's
			Employee attribute contain the same type of value. If they were both just NMTOKENs this
			may not have been as obvious.</p><p>Maintainability of DTDs is increased by allowing all related content types to be
			changed from a single place. For instance, in the Examples section above if the company
			this payroll system was created for merges with another company, and the employee
			numbers from the new company can contain a space, the "NMTOKEN" attribute type
			is no longer valid. By changing the EmployeeNum parameter entity to "CDATA",
			all references to the employee number in the DTD can be changed.</p></div><div class="section" title="Related Patterns"><div class="titlepage"><h3 class="title" id="d55e1874">Related Patterns</h3></div><p>This is an example of a Flyweight.</p></div><div class="section" title="Known Uses"><div class="titlepage"><h3 class="title" id="d55e1879">Known Uses</h3></div><p>XHTML uses Content Type Labels extensively. For example:</p><div class="literallayout"><p><br/>
&lt;!ENTITY % URI "CDATA"&gt;<br/>
&lt;!-- a Uniform Resource Identifier, see [RFC2396] --&gt;<br/>
<br/>
&lt;!ENTITY % FrameTarget "NMTOKEN"&gt;<br/>
&lt;!-- render in this frame --&gt;<br/>
<br/>
&lt;!-- document base URI --&gt;<br/>
<br/>
&lt;!ELEMENT base EMPTY&gt;<br/>
&lt;!ATTLIST base<br/>
href        %URI;          #IMPLIED<br/>
target      %FrameTarget;  #IMPLIED<br/>
&gt;<br/>
</p></div><p>The above excepts shows how Content Type Labels are used to make it clearer what is
			expected in the attributes of the base element.</p></div><div class="section" title="References"><div class="titlepage"><h3 class="title" id="d55e1888">References</h3></div><p>The document XML Modularization of HTML 4.0 by Murray Altheim explains the use of this
			pattern in XHTML.</p></div></div><div class="section" title="Reuse Document Types"><div class="titlepage"><h2 class="title" id="d55e1893">Reuse Document Types</h2><div><div class="abstract" title="Abstract"><p class="title"><strong>Abstract</strong></p><p>If document types already exist for the job at hand, they can be reused completely
				or parts of them can be reused.</p></div></div></div><div class="section" title="Problem"><div class="titlepage"><h3 class="title" id="d55e1900">Problem</h3></div><p>A new set of data needs to be marked up with XML and a document type is needed.</p></div><div class="section" title="Context"><div class="titlepage"><h3 class="title" id="d55e1905">Context</h3></div><p>This applies to almost every project. Before starting to create a new document type,
			existing ones that can be used should be looked for.</p></div><div class="section" title="Forces"><div class="titlepage"><h3 class="title" id="d55e1910">Forces</h3></div><p>Reusing existing data cuts down on development costs and times.</p><p>Using industry standard document types increases chances that existing tools can be
			used out of the box, and allows for future interoperability.</p></div><div class="section" title="Solution"><div class="titlepage"><h3 class="title" id="d55e1917">Solution</h3></div><p>Reuse an existing document type. If an industry standard document type already exists,
			it should be reused.</p></div><div class="section" title="Examples"><div class="titlepage"><h3 class="title" id="d55e1922">Examples</h3></div><p>…</p></div><div class="section" title="Discussion"><div class="titlepage"><h3 class="title" id="d55e1927">Discussion</h3></div><p>Before anybody creates a new document type, existing document types should be
			investigated.</p><div class="variablelist"><dl><dt><span class="term">Complete Reuse</span></dt><dd><p>Ideally a document type will exist that precisely matches the needs of the
						project. This can be beneficial in many areas:</p></dd><dt><span class="term">Decrease development time and cost</span></dt><dd><p>Reuse of Experience. Often developers of existing documents are groups of
						experienced experts who have put significant time into the development of
						the document type, and will produce high quality document types.</p></dd><dt><span class="term">Interoperability.</span></dt><dd><p>Use of industry standard document types will increase the chance that the
						system will interoperate with other systems.</p></dd><dt><span class="term">Partial Reuse</span></dt><dd><p>If existing document types do not exactly match the needs of the project,
						they can be partially reused. Modification can be made to document types to
						allow this partial reuse. The easiest way to do this is simply to edit the
						existing document type. Some document types may allow for customization
						through techniques such as Extensible Content Model . Partially reusing
						document types still has the benefits of decreasing development time and
						cost, and reusing experience, but will not allow for interoperabilty. If
						interoperabilty is a desired goal of the system, modification of existing
						document types must be looked at very carefully.</p></dd></dl></div></div><div class="section" title="Related Patterns"><div class="titlepage"><h3 class="title" id="d55e1957">Related Patterns</h3></div><p>The Composition Pattern is a subset of this pattern.</p></div><div class="section" title="Known Uses"><div class="titlepage"><h3 class="title" id="d55e1962">Known Uses</h3></div><p>Many of the document types found in the references section are being reused in
			multiple projects.</p></div><div class="section" title="References"><div class="titlepage"><h3 class="title" id="d55e1967">References</h3></div><p>There are several sources of existing schemas on the web: XML.org's Catalog
			Schema.net</p></div></div><div class="section" title="Short Understandable Names"><div class="titlepage"><h2 class="title" id="d55e1972">Short Understandable Names</h2><div><div class="abstract" title="Abstract"><p class="title"><strong>Abstract</strong></p><p>Names of elements and attributes should short and understandable by authors and
				developers of processing software.</p></div></div></div><div class="section" title="Problem"><div class="titlepage"><h3 class="title" id="d55e1979">Problem</h3></div><p>Names need to be given to each attribute and name.</p></div><div class="section" title="Context"><div class="titlepage"><h3 class="title" id="d55e1984">Context</h3></div><p>This pattern can be used in any document type. All documents have named elements and
			attributes.</p></div><div class="section" title="Forces"><div class="titlepage"><h3 class="title" id="d55e1989">Forces</h3></div><p>Shorter names make the authoring of documents easier and reduces the overall length of
			documents. Names that are too short make the document difficult to understand.</p></div><div class="section" title="Solution"><div class="titlepage"><h3 class="title" id="d55e1994">Solution</h3></div><p>Use names that are long enough to convey the meaning of the document to its intended
			audience, but are short enough to be typed easily. Similar naming length issues are seen
			in programming languages.</p></div><div class="section" title="Examples"><div class="titlepage"><h3 class="title" id="d55e1999">Examples</h3></div><p>A element name such as TelephoneDescription is fairly long, PhoneDescription or
			PhoneDesc might be more appropriate choices.</p></div><div class="section" title="Discussion"><div class="titlepage"><h3 class="title" id="d55e2004">Discussion</h3></div><p>Use well known terms and abbreviations from the domain that the document deals with.
			These terms and abbreviations should be used consistently throughout the document. The
			audience of the document must be kept in mind, too much jargon can intimidate novices
			very quickly.</p><p>Context can be take into account to shorten names as well. In the following
			sample:</p><div class="literallayout"><p><br/>
                                &lt;Telephone&gt;<br/>
                                &lt;TelephoneModelName&gt;X-259&lt;/TelephoneModelName&gt;<br/>
                                &lt;/Telephone&gt;<br/>
            </p></div><p>The element name TelephoneModelName could easily be shortened to ModelName without
			loosing any understandability of the document.</p></div><div class="section" title="Related Patterns"><div class="titlepage"><h3 class="title" id="d55e2015">Related Patterns</h3></div><p>…</p></div><div class="section" title="Known Uses"><div class="titlepage"><h3 class="title" id="d55e2020">Known Uses</h3></div><p>HTML uses many element names which are shortened beyond understandability, for example
			the b, i, dt, and ul elements are very cryptic to novice users. Element names such as
			font and img convey much more meaning, and are not long enough to cause problems.</p></div></div><div class="section" title="Use XML"><div class="titlepage"><h2 class="title" id="d55e2025">Use XML</h2><div><div class="abstract" title="Abstract"><p class="title"><strong>Abstract</strong></p><p>XML technology can be used to represent structured information. This pattern helps
				determine when XML is an appropriate solution.</p></div></div></div><div class="section" title="Problem"><div class="titlepage"><h3 class="title" id="d55e2032">Problem</h3></div><p>When data in a system needs to be imported or exported, it needs some type of
			representation. There are many possible representations for example: Comma Separated
			Values, Java Object Serialization, Proprietary Binary Formats, HTML, CORBA IIOP Streams,
			RDBMS tables, and of course XML. Choosing the proper representation for the data can be
			difficult.</p></div><div class="section" title="Context"><div class="titlepage"><h3 class="title" id="d55e2037">Context</h3></div><p>XML can be an appropriate choice when one or more of the following is needed:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><p>Content needs to be separate from its formatting.</p></li><li class="listitem"><p>Data is shared between computers, applications or organizations.</p></li><li class="listitem"><p>Human readable representation is needed.</p></li><li class="listitem"><p>Readily available tools and resources.</p></li></ul></div><p>There are some situations where XML may not be a good choice. Among them are systems where:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><p>Terseness is important.</p></li><li class="listitem"><p>In a homogeneous environment.</p></li></ul></div></div><div class="section" title="Forces"><div class="titlepage"><h3 class="title" id="d55e2064">Forces</h3></div><p>There are many forces to take into account when considering a data representation.
			Among the ones that XML can provide are simplicity, openness, extensibility,
			interoperability, and a technology with proven use.</p></div><div class="section" title="Solution"><div class="titlepage"><h3 class="title" id="d55e2069">Solution</h3></div><p>Use XML for data representations.</p></div><div class="section" title="Examples"><div class="titlepage"><h3 class="title" id="d55e2074">Examples</h3></div><p>…</p></div><div class="section" title="Discussion"><div class="titlepage"><h3 class="title" id="d55e2079">Discussion</h3></div><p>It is impossible to have a complete discussion of the factors involved in make the
			decision of a data representation in the space of a single pattern, but it can try to
			provide some pointers.</p></div><div class="section" title="Related Patterns"><div class="titlepage"><h3 class="title" id="d55e2084">Related Patterns</h3></div><p>All other patterns in this language depend on first using this pattern, because they
			assume that XML is being used.</p></div><div class="section" title="Known Uses"><div class="titlepage"><h3 class="title" id="d55e2089">Known Uses</h3></div><p>There are many places where XML is being used successfully. Here is a small sampling
			of them.</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><p>Data syndication. XML has been popular in this area, and several XML languages
					have been developed for this purpose.</p></li><li class="listitem"><p>The Information and Content Exchange (ICE) Protocol</p></li><li class="listitem"><p>moreover.com provides news feeds in several different XML flavors.</p></li><li class="listitem"><p>News can be syndicated to browsers via Rich Site Summary</p></li><li class="listitem"><p>Data exchange protocols for transport of messages from one system to another
					across a network.</p></li><li class="listitem"><p>SOAP (Simple Object Access Protocol)</p></li><li class="listitem"><p>Configuration files</p></li><li class="listitem"><p>J2EE uses Deployment Descriptors to configure various components</p></li><li class="listitem"><p>Test Scripting</p></li><li class="listitem"><p>The XML Test Suite</p></li><li class="listitem"><p>Log files</p></li><li class="listitem"><p>The LOGML specification is designed to describe log reports of web
					servers</p></li><li class="listitem"><p>Web content management</p></li><li class="listitem"><p>See Ronald Bourret's Content Management Systems page</p></li><li class="listitem"><p>Wireless Application Data (WAP)</p></li></ul></div></div><div class="section" title="References"><div class="titlepage"><h3 class="title" id="d55e2141">References</h3></div><p>For more information:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><p>Simon St. Laurent's Essay - Why XML?</p></li><li class="listitem"><p>A whitepaper by Bob Schloss Ten best bets for XML applications</p></li></ul></div></div></div></div></div><div class="part" title="Part IV. Books" id="d55e2153"><div class="titlepage"><div><div><h1 class="title">Part IV. Books</h1></div></div></div><dl class="toc"><dt>Table of Contents</dt><dd><ol class="part"><li class="chapter"><a href="#d55e2156">XML Structure</a></li><li class="chapter"><a href="#d55e2161">Patterns</a></li><li class="chapter"><a href="#d55e2166">Software Design Patterns</a></li></ol></dd></dl><div class="chapter" title="Chapter 8. XML Structure" id="d55e2156"><div class="titlepage"><h2 class="title">Chapter 8. XML Structure</h2></div><p>…</p></div><div class="chapter" title="Chapter 9. Patterns" id="d55e2161"><div class="titlepage"><h2 class="title">Chapter 9. Patterns</h2></div><p>…</p></div><div class="chapter" title="Chapter 10. Software Design Patterns" id="d55e2166"><div class="titlepage"><h2 class="title">Chapter 10. Software Design Patterns</h2></div><p>…</p></div></div><div class="part" title="Part V. Links" id="d55e2171"><div class="titlepage"><div><div><h1 class="title">Part V. Links</h1></div></div></div><dl class="toc"><dt>Table of Contents</dt><dd><ol class="part"><li class="article"><a href="#d55e2174">Links</a><ol><li class="section"><a href="#d55e2179">XML Design Patterns</a></li><li class="section"><a href="#d55e2233">Other Patterns</a></li><li class="section"><a href="#d55e2257">XML Design</a></li><li class="section"><a href="#d55e2275">Schema Repositories</a></li></ol></li><li class="article"><a href="#d55e2299">Other XML Links</a><ol><li class="section"><a href="#d55e2304">General XML</a></li><li class="section"><a href="#d55e2334">XSLT</a></li></ol></li></ol></dd></dl><div class="article" title="Links" id="d55e2174"><div class="titlepage"><div><h2 class="title">Links</h2></div><hr/></div><dl class="toc"><dt>Table of Contents</dt><dd><ol class="article"><li class="section"><a href="#d55e2179">XML Design Patterns</a></li><li class="section"><a href="#d55e2233">Other Patterns</a></li><li class="section"><a href="#d55e2257">XML Design</a></li><li class="section"><a href="#d55e2275">Schema Repositories</a></li></ol></dd></dl><p>This page lists recommended web sites listed by category.</p><div class="section" title="XML Design Patterns"><div class="titlepage"><h2 class="title" id="d55e2179">XML Design Patterns</h2></div><p>Links to pages dealing specifically with XML Design Patterns.</p><div class="variablelist"><dl><dt><span class="term">Design Patterns in XML Music Representation</span></dt><dd><p>An excellent paper discussing how XML Design Patterns (many taken from this site) can be useful in creating an XML DTD.</p></dd><dt><span class="term">Design Patterns in XML Applications: Part 1</span></dt><dd><p>Fabio Arciniegas' article on using object oriented design patterns in processing XML documents. Discusses four patterns: Command, Flyweight, Wrapper, and Iterator.</p></dd><dt><span class="term">Design Patterns in XML Applications: Part 2</span></dt><dd><p>Fabio Arciniegas' article on XML structural patterns. Includes six patterns.</p></dd><dt><span class="term">Introduction to XML Design patterns</span></dt><dd><p>Ian Graham and Liam Quin's site which contains 4 patterns, Running Text, Generated Text, Footnote, and Text Blocks.</p></dd><dt><span class="term">Architectural Design Patterns for XML Documents</span></dt><dd><p>Kyle Downey's article attempts to document a few whole-document design patterns.</p></dd><dt><span class="term">XML Acceptor Design Pattern</span></dt><dd><p>A XML processing design pattern.</p></dd><dt><span class="term">XML Design Patterns Article (PDF)</span></dt><dd><p>A paper describing four XML processing design pattern.</p></dd><dt><span class="term">Structural Patterns in XML</span></dt><dd><p>An article on XML.com describing three structural patterns for XML Schema: Composite, Abstract Model, and Peer Specialization.</p></dd></dl></div></div><div class="section" title="Other Patterns"><div class="titlepage"><h2 class="title" id="d55e2233">Other Patterns</h2></div><p>Links to pages about patterns in area other than XML.</p><div class="variablelist"><dl><dt><span class="term">TheServerSide.com's Pattern Collection</span></dt><dd><p>A pattern repository focusing on patterns that can be used with Java middleware technologies. They are inviting site visitors to contribute patterns.</p></dd><dt><span class="term">Hypermedia Design Patterns Repository</span></dt><dd><p>A pattern repository for patterns to be used in hypermedia design. The patterns are categorized into Interface/Layout, Structure/Navigation and Content Oriented Patterns.</p></dd><dt><span class="term">Patterns and Software: Essential Concepts and Terminology</span></dt><dd><p>Brad Appleton's excellent page about patterns in the field of object-oriented software.</p></dd></dl></div></div><div class="section" title="XML Design"><div class="titlepage"><h2 class="title" id="d55e2257">XML Design</h2></div><p>Links to pages about XML structural design issues.</p><div class="variablelist"><dl><dt><span class="term">Serializing Graphs of Data in XML</span></dt><dd><p>A discussion of representing graph structure such as RDBMS tables in XML.</p></dd><dt><span class="term">Elements vs. Attributes</span></dt><dd><p>Robin Cover's page covering the element vs. attributes debate. When should you use an element? When should you use an attribute? Check this page for some good references.</p></dd></dl></div></div><div class="section" title="Schema Repositories"><div class="titlepage"><h2 class="title" id="d55e2275">Schema Repositories</h2></div><p>Links to pages that contain repositories of XML Schemas. Great place to look for schemas to reuse, or to get ideas from.</p><div class="variablelist"><dl><dt><span class="term">The XML Catalog</span></dt><dd><p>Oasis' catalog of XML specifications.</p></dd><dt><span class="term">Robin Cover's Listing of XML Applications</span></dt><dd><p>A comprehensive listing of XML applications and announced industry initiatives.</p></dd><dt><span class="term">Schema.net</span></dt><dd><p>A catalog of many different schemas from a variety of categories.</p></dd></dl></div></div></div><div class="article" title="Other XML Links" id="d55e2299"><div class="titlepage"><div><h2 class="title">Other XML Links</h2></div><hr/></div><dl class="toc"><dt>Table of Contents</dt><dd><ol class="article"><li class="section"><a href="#d55e2304">General XML</a></li><li class="section"><a href="#d55e2334">XSLT</a></li></ol></dd></dl><p>This page lists recommended web sites listed by category.</p><div class="section" title="General XML"><div class="titlepage"><h2 class="title" id="d55e2304">General XML</h2></div><p>Links to pages about general XML information.</p><div class="variablelist"><dl><dt><span class="term">The XML Recommendation</span></dt><dd><p>The official XML 1.0 Recommendation from the W3C site.</p></dd><dt><span class="term">XML.com</span></dt><dd><p>A good general XML site with article and lots of reference pages.</p></dd><dt><span class="term">XML Hack</span></dt><dd><p>A site that provide daily news stories about all aspects of XML.</p></dd><dt><span class="term">The XML Cover Pages</span></dt><dd><p>Robin Cover provides extensive references that cover the entire SGML/XML world, updated continually.</p></dd></dl></div></div><div class="section" title="XSLT"><div class="titlepage"><h2 class="title" id="d55e2334">XSLT</h2></div><p>Links to pages about XSLT, the Extensible Stylesheet Language: Transformations.</p><div class="variablelist"><dl><dt><span class="term">The XSLT Recommendation</span></dt><dd><p>The official XSLT 1.0 Recommendation from the W3C site.</p></dd><dt><span class="term">XSLT.com</span></dt><dd><p>A good site with lots of general information about XSLT.</p></dd><dt><span class="term">XSL-List FAQ</span></dt><dd><p>Contains frequently asked questions from the XSL-List mailing list. Maintained by Dave Pawson.</p></dd></dl></div></div></div></div><div class="article" title="About" id="d55e2358"><div class="titlepage"><div><h2 class="title">About</h2></div><hr/></div><dl class="toc"><dt>Table of Contents</dt><dd><ol class="article"><li class="section"><a href="#d55e2363">Contacts</a></li><li class="section"><a href="#d55e2378">What They Are Saying About Us</a></li><li class="section"><a href="#d55e2387">Privacy Statement</a></li><li class="section"><a href="#d55e2394">Log Files</a></li><li class="section"><a href="#d55e2399">Cookies and Web Beacons</a></li><li class="section"><a href="#d55e2406">DoubleClick DART cookies</a></li></ol></dd></dl><p>Develop effective XML documents using structural design patterns.</p><div class="section" title="Contacts"><div class="titlepage"><h2 class="title" id="d55e2363">Contacts</h2></div><p>Please feel free to send email using the links below:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><p>Comments about the website: webmaster@xmlpatterns.com</p></li><li class="listitem"><p>Comments about the patterns: patterns@xmlpatterns.com</p></li><li class="listitem"><p>General comments and inquiries, advertising information: info@xmlpatterns.com</p></li></ul></div></div><div class="section" title="What They Are Saying About Us"><div class="titlepage"><h2 class="title" id="d55e2378">What They Are Saying About Us</h2></div><p>"A very interesting approach to designing/developing XML documents. I would say that it is a must-read for any serious XML developer, not to mention a very interesting concept!!!!!" (XMLPitstop)</p><p>"XMLPatterns has really helped me get a handle on the conceptual structure of data" Derrick Bell (Secrets of the XML developer elite)</p><p>"I recently came across an oustanding reference site on design patterns for creating good XML. The site is XMLPatterns.com. The content has already been very helpful to me and I recommend this as a useful reference link." (CSharpener's Weblog)</p></div><div class="section" title="Privacy Statement"><div class="titlepage"><h2 class="title" id="d55e2387">Privacy Statement</h2></div><p>Our basic privacy policy is simple. We will not rent, sell, or share personal information that we collect about you.</p><p>At XMLPatterns.com, we recognize that privacy of your personal information is important. Here is information on what types of personal information we receive and collect when you use and visit XMLPatterns.com, and how we safeguard your information. We never sell your personal information to third parties.</p></div><div class="section" title="Log Files"><div class="titlepage"><h2 class="title" id="d55e2394">Log Files</h2></div><p>As with most other websites, we collect and use the data contained in log files. The information in the log files include your IP (internet protocol) address, your ISP (internet service provider, such as AOL or Shaw Cable), the browser you used to visit our site (such as Internet Explorer or Firefox), the time you visited our site and which pages you visited throughout our site.</p></div><div class="section" title="Cookies and Web Beacons"><div class="titlepage"><h2 class="title" id="d55e2399">Cookies and Web Beacons</h2></div><p>We do use cookies to store information, such as your personal preferences when you visit our site. This could include only showing you a popup once in your visit, or the ability to login to some of our features, such as forums.</p><p>We also use third party advertisements on XMLPatterns.com to support our site. Some of these advertisers may use technology such as cookies and web beacons when they advertise on our site, which will also send these advertisers (such as Google through the Google AdSense program) information including your IP address, your ISP , the browser you used to visit our site, and in some cases, whether you have Flash installed. This is generally used for geotargeting purposes (showing New York real estate ads to someone in New York, for example) or showing certain ads based on specific sites visited (such as showing cooking ads to someone who frequents cooking sites).</p></div><div class="section" title="DoubleClick DART cookies"><div class="titlepage"><h2 class="title" id="d55e2406">DoubleClick DART cookies</h2></div><p>We also may use DART cookies for ad serving through Google's DoubleClick, which places a cookie on your computer when you are browsing the web and visit a site using DoubleClick advertising (including some Google AdSense advertisements). This cookie is used to serve ads specific to you and your interests (“interest based targeting”). The ads served will be targeted based on your previous browsing history (For example, if you have been viewing sites about visiting Las Vegas, you may see Las Vegas hotel advertisements when viewing a non-related site, such as on a site about hockey). DART uses "non personally identifiable information". It does NOT track personal information about you, such as your name, email address, physical address, telephone number, social security numbers, bank account numbers or credit card numbers. You can opt-out of this ad serving on all sites using this advertising by visiting <a class="link" href="http://www.doubleclick.com/privacy/dart_adserving.aspx">http://www.doubleclick.com/privacy/dart_adserving.aspx</a>.</p><p>You can chose to disable or selectively turn off our cookies or third-party cookies in your browser settings, or by managing preferences in programs such as Norton Internet Security. However, this can affect how you are able to interact with our site as well as other websites. This could include the inability to login to services or programs, such as logging into forums or accounts.</p><p>Deleting cookies does not mean you are permanently opted out of any advertising program. Unless you have settings that disallow cookies, the next time you visit a site running the advertisements, a new cookie will be added.</p><p>We have relationships with other companies that we allow to place ads on our Web pages. As a result of your visit to our site, ad server companies may collect information such as your domain type, your IP address and clickstream information and may be placing and reading cookies on your browser. If you wish to disable cookies, you may do so through your browser options.</p></div></div></div></body></html>